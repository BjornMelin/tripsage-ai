[project]
name = "tripsage-ai"
version = "0.1.0"
description = "AI-powered travel planning system with multi-source data integration"
readme = "README.md"
requires-python = ">=3.13"
authors = [{ name = "TripSage Team" }]
dependencies = [
    # Core web framework and async support
    "aiofiles>=24.1.0",
    "fastapi>=0.115.12",
    "uvicorn>=0.34.3",
    "httpx>=0.28.1",
    "python-multipart>=0.0.20",
    # Authentication and security
    "pyjwt>=2.10.1", # For Supabase JWT token validation
    "passlib[bcrypt]>=1.7.4", # For password hashing
    # Data validation and configuration
    "pydantic>=2.11.5",
    "pydantic-settings>=2.9.1",
    "email-validator>=2.2.0",
    "python-dotenv>=1.1.0",
    # Performance optimizations
    "msgpack>=1.1.0",  # Binary serialization for WebSocket performance
    # Database and caching
    "sqlalchemy[asyncio]>=2.0.41",
    "greenlet>=3.2.3",
    "redis>=6.2.0",
    "supabase>=2.15.2",
    # AI and LLM ecosystem
    "langchain-core>=0.3.64",
    "langchain-openai>=0.3.21",
    "langgraph>=0.4.8",
    "langsmith>=0.3.45",
    "openai>=1.84.0",
    "mem0ai>=0.1.106",
    "tenacity>=9.1.2",
    "typing-extensions>=4.14.0",
    # Web scraping and automation
    "crawl4ai>=0.6.3",
    "playwright>=1.52.0",
    # External API integrations
    "google-api-python-client>=2.171.0",
    "google-auth>=2.40.3",
    "google-auth-httplib2>=0.2.0",
    "google-auth-oauthlib>=1.2.2",
    "googlemaps>=4.10.0",
    "duffel-api>=0.6.2",
    # Observability and monitoring
    "opentelemetry-api>=1.34.0",
    "opentelemetry-sdk>=1.34.0",
    "opentelemetry-instrumentation-redis>=0.55b0",
    "opentelemetry-exporter-otlp>=1.34.0",
    "prometheus-client>=0.20.0",
    "psutil>=7.0.0",
    "asyncpg>=0.30.0",
    "slowapi>=0.1.9",
]

[tool.setuptools.packages.find]
where = ["."]
include = ["tripsage", "tripsage_core", "tripsage.*", "tripsage_core.*"]


[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
pythonpath = ["."]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
log_cli = true
log_cli_level = "INFO"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short",
    "--cov=tripsage",
    "--cov=tripsage_core",
    "--cov-report=term-missing",
    "--cov-report=html:coverage/html",
    "--cov-report=xml:coverage/coverage.xml",
    "--cov-fail-under=90",
    "--cov-branch",
    "--no-cov-on-fail",
    "-ra"
]

[tool.ruff]
line-length = 88
target-version = "py313"
lint.select = ["E", "F", "B", "I"]

# Per-file ignores: Allow FastAPI Depends() only in API router files
[tool.ruff.lint.per-file-ignores]
"tripsage/api/routers/*.py" = ["B008"]  # Allow Depends() in FastAPI routers
"tripsage/api/core/*.py" = ["B008"]  # Allow Depends() in FastAPI dependencies
"tripsage_core/services/business/auth_service.py" = ["B008"]  # Allow Depends() in auth service
"tests/conftest.py" = ["E402"]  # Allow imports after code execution for environment setup

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

# Modern dependency groups following PEP 735
[dependency-groups]
test = [
    # Core testing framework
    "pytest>=8.4.0",
    "pytest-asyncio>=1.0.0",
    "pytest-cov>=6.1.1",
    "pytest-mock>=3.14.1",
    "pytest-timeout>=2.4.0",
    # Testing utilities and mocking
    "pytest-benchmark>=5.1.0",
    "pytest-httpx>=0.35.0",
    "fakeredis>=2.29.0",
    "nest-asyncio>=1.6.0",
    "hypothesis>=6.120.0",
    # Performance and load testing
    "locust>=2.31.10",
    # Coverage reporting
    "coverage[toml]>=7.8.2",
]

lint = [
    # Code formatting and linting
    "ruff>=0.11.13",
    "mypy>=1.16.0",
]

dev = [
    # Include test and lint groups
    {include-group = "test"},
    {include-group = "lint"},
    # Additional development tools
    "radon>=6.0.1",
    "bandit>=1.8.3",
    "mypy>=1.16.0",
    "mutmut>=3.3.0",
]

# Scripts and benchmarking with visualization
benchmark = [
    # Core benchmarking
    "click>=8.1.0",
    "numpy>=1.24.0",  # Vector generation for database benchmarks
    # Visualization (both static and interactive)
    "matplotlib>=3.7.0",
    "plotly>=5.17.0",
]

# Optional heavy dependencies for advanced analysis
analysis = [
    "jupyter>=1.1.1",
    "ipython>=8.0.0", 
    "polars>=1.0.0",              # High-performance data processing (15-30x faster)
    "memory-profiler>=0.61.0",
]

[tool.coverage.run]
branch = true
source = ["tripsage", "tripsage_core"]
omit = [
    "*/tests/*",
    "*/migrations/*",
    "*/__init__.py",
    "*/config.py",
    "*/test_*.py",
    "**/conftest.py"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@abstractmethod",
    "@abc.abstractmethod",
    "except ImportError:",
    "# nocov",
    "pass"
]
show_missing = true
precision = 2
fail_under = 90

[tool.coverage.html]
directory = "coverage/html"

[tool.coverage.xml]
output = "coverage/coverage.xml"

[tool.bandit]
# Exclude false positive security warnings
exclude_dirs = ["tests"]
skips = [
    "B104",  # Hardcoded bind all interfaces (development server)
    "B608",  # SQL injection in string formatting (false positives in error messages)
]

[tool.hatch.build.targets.wheel]
packages = ["tripsage", "tripsage_core"]
