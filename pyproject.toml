[project]
name = "tripsage-ai"
version = "0.1.0"
description = "AI-powered travel planning system with multi-source data integration"
readme = "README.md"
requires-python = ">=3.12"
authors = [{ name = "TripSage Team" }]
dependencies = [
    "aiofiles>=24.1.0",
    "crawl4ai>=0.6.3",
    "cryptography>=45.0.3",
    "email-validator>=2.2.0",
    "fakeredis>=2.29.0",
    "fastapi>=0.115.12",
    "google-api-python-client>=2.170.0",
    "google-auth>=2.40.2",
    "google-auth-httplib2>=0.2.0",
    "google-auth-oauthlib>=1.2.2",
    "googlemaps>=4.10.0",
    "httpx>=0.28.1",
    "langchain-core>=0.3.63",
    "langchain-openai>=0.3.18",
    "langgraph>=0.4.7",
    "mem0ai>=0.1.102",
    "passlib[bcrypt]>=1.7.4",
    "playwright>=1.52.0",
    "pydantic>=2.11.5",
    "pydantic-settings>=2.9.1",
    "pytest>=8.3.5",
    "pytest-cov>=6.1.1",
    "python-dotenv>=1.1.0",
    "python-jose[cryptography]>=3.5.0",
    "python-multipart>=0.0.20",
    "redis>=6.2.0",
    "sqlalchemy[asyncio]>=2.0.41",
    "supabase>=2.15.2",
    "uvicorn>=0.34.2",
]

[tool.setuptools.packages.find]
where = ["."]
include = ["tripsage", "tripsage_core", "tripsage.*", "tripsage_core.*"]

# Optional dependencies for development and testing

[project.optional-dependencies]
dev = [
    "ruff>=0.11.9", 
    "pytest>=8.3.5", 
    "pytest-cov>=6.1.1",
    "pytest-asyncio>=1.0.0",
    "pytest-mock>=3.14.1",
    "coverage[toml]>=7.6.9",
    "pytest-benchmark>=4.0.0",
    "pytest-httpx>=0.35.0",
    "fakeredis>=2.29.0",
    "nest-asyncio>=1.6.0"
]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
pythonpath = ["."]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
log_cli = true
log_cli_level = "INFO"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short",
    "--cov=tripsage",
    "--cov=tripsage_core",
    "--cov-report=term-missing",
    "--cov-report=html:coverage/html",
    "--cov-report=xml:coverage/coverage.xml",
    "--cov-fail-under=90",
    "--cov-branch",
    "--no-cov-on-fail",
    "-ra"
]

[tool.ruff]
line-length = 88
target-version = "py312"
lint.select = ["E", "F", "B", "I"]

# Per-file ignores: Allow FastAPI Depends() only in API router files
[tool.ruff.lint.per-file-ignores]
"tripsage/api/routers/*.py" = ["B008"]  # Allow Depends() in FastAPI routers
"tripsage/api/core/*.py" = ["B008"]  # Allow Depends() in FastAPI dependencies

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[dependency-groups]
dev = [
    "pytest>=8.3.5",
    "pytest-asyncio>=1.0.0",
    "pytest-cov>=6.1.1",
    "pytest-mock>=3.14.1",
    "nest-asyncio>=1.6.0",
    "radon>=6.0.1",
]
test = [
    "email-validator>=2.2.0",
    "fastapi>=0.115.12",
    "httpx>=0.28.1",
    "passlib>=1.7.4",
    "pydantic>=2.11.5",
    "pydantic-settings>=2.9.1",
    "pytest>=8.3.5",
    "pytest-asyncio>=1.0.0",
    "pytest-mock>=3.14.1",
    "pytest-cov>=6.1.1",
    "python-dotenv>=1.1.0",
    "python-jose>=3.5.0",
    "python-multipart>=0.0.20",
    "redis>=6.1.0",
    "sqlalchemy>=2.0.41",
    "supabase>=2.15.2",
    "uvicorn>=0.34.2",
    "nest-asyncio>=1.6.0",
    "fakeredis>=2.29.0",
]

[tool.coverage.run]
branch = true
source = ["tripsage", "tripsage_core"]
omit = [
    "*/tests/*",
    "*/migrations/*",
    "*/__init__.py",
    "*/config.py",
    "*/test_*.py",
    "**/conftest.py"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@abstractmethod",
    "@abc.abstractmethod",
    "except ImportError:",
    "# nocov",
    "pass"
]
show_missing = true
precision = 2
fail_under = 90

[tool.coverage.html]
directory = "coverage/html"

[tool.coverage.xml]
output = "coverage/coverage.xml"

[tool.hatch.build.targets.wheel]
packages = ["tripsage", "tripsage_core"]
