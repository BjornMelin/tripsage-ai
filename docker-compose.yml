version: '3.8'

services:
  # DragonflyDB - High-performance Redis replacement
  # Provides 25x performance improvement with full Redis compatibility
  dragonfly:
    image: docker.dragonflydb.io/dragonflydb/dragonfly:latest
    container_name: tripsage-dragonfly
    ports:
      - "${DRAGONFLY_PORT:-6379}:6379"
    volumes:
      - dragonfly-data:/data
    environment:
      - DRAGONFLY_PASSWORD=${DRAGONFLY_PASSWORD:-tripsage_secure_password}
      - DRAGONFLY_MAX_MEMORY=${DRAGONFLY_MAX_MEMORY:-4gb}
    command: >
      --logtostderr
      --cache-mode
      --maxmemory-policy=allkeys-lru
      --requirepass=${DRAGONFLY_PASSWORD:-tripsage_secure_password}
    restart: unless-stopped
    networks:
      - tripsage-network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${DRAGONFLY_PASSWORD:-tripsage_secure_password}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # OpenTelemetry Collector for monitoring
  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    container_name: tripsage-otel-collector
    command: ["--config=/etc/otelcol/config.yaml"]
    volumes:
      - ./docker/otel-collector-config.yaml:/etc/otelcol/config.yaml:ro
    ports:
      - "4317:4317"     # OTLP gRPC receiver
      - "4318:4318"     # OTLP HTTP receiver
      - "8888:8888"     # Prometheus metrics
      - "8889:8889"     # Prometheus exporter
    restart: unless-stopped
    networks:
      - tripsage-network
    depends_on:
      - jaeger
      - prometheus

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: tripsage-jaeger
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    ports:
      - "16686:16686"   # Jaeger UI
      - "14268:14268"   # Jaeger collector
      - "14250:14250"   # Jaeger gRPC
    restart: unless-stopped
    networks:
      - tripsage-network

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: tripsage-prometheus
    volumes:
      - ./docker/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    ports:
      - "9090:9090"
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.enable-lifecycle"
    restart: unless-stopped
    networks:
      - tripsage-network

  # Grafana for dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: tripsage-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
    volumes:
      - grafana-data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning:ro
    ports:
      - "3000:3000"
    restart: unless-stopped
    networks:
      - tripsage-network
    depends_on:
      - prometheus
      - jaeger

volumes:
  dragonfly-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

networks:
  tripsage-network:
    driver: bridge
    name: tripsage-infrastructure