# =============================================================================
# TripSage AI Local Development Environment (Dedicated Dockerfiles Version)
# =============================================================================
# This Docker Compose file provides a complete local development environment
# using dedicated Dockerfiles for optimal performance and caching.
#
# PURPOSE:
# - Provides mock/stub services for external SDKs integrated in tripsage_core
# - Simulates behavior of actual external services (Supabase, Duffel, Google Maps, etc.)
# - Only exception: airbnb-mcp interacts with actual Airbnb platform via MCP
#   due to lack of official SDK
#
# BENEFITS OF DEDICATED DOCKERFILES:
# - Faster container startup (pre-installed packages)
# - Better dependency caching and layer optimization
# - Enhanced security with non-root users
# - Built-in health checks for reliability
#
# USAGE:
# docker compose -f docker-compose.mcp.dedicated.yml up -d
#
# For production deployment, use separate production configurations.
# =============================================================================

services:
  # ==========================================================================
  # DATABASE MCP SERVERS
  # Mock/stub database services for local development
  # ==========================================================================
  
  supabase-mcp:
    build:
      context: ./dev_services/supabase_mcp
      dockerfile: Dockerfile
    container_name: tripsage-supabase-mcp
    environment:
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_KEY=${SUPABASE_KEY}
    restart: unless-stopped
    networks:
      - tripsage-mcp
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: '256M'
        reservations:
          cpus: '0.25'
          memory: '128M'

  neo4j-memory-mcp:
    image: node:20-alpine
    container_name: tripsage-neo4j-mcp
    environment:
      - NEO4J_URI=${NEO4J_URI}
      - NEO4J_USERNAME=${NEO4J_USERNAME}
      - NEO4J_PASSWORD=${NEO4J_PASSWORD}
    # Mock Neo4j memory service for local development
    command: npx -y @neo4j-contrib/mcp-neo4j@1.0.0
    restart: unless-stopped
    networks:
      - tripsage-mcp
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: '512M'
        reservations:
          cpus: '0.25'
          memory: '256M'

  # ==========================================================================
  # TRAVEL PROVIDER MCP SERVERS
  # Mock/stub services for travel APIs used in tripsage_core
  # ==========================================================================
  
  duffel-flights-mcp:
    build:
      context: ./dev_services/duffel_flights_mcp
      dockerfile: Dockerfile
    container_name: tripsage-duffel-mcp
    environment:
      - DUFFEL_API_KEY=${DUFFEL_API_KEY}
    restart: unless-stopped
    networks:
      - tripsage-mcp
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: '256M'
        reservations:
          cpus: '0.25'
          memory: '128M'

  airbnb-mcp:
    build:
      context: ./dev_services/airbnb_mcp
      dockerfile: Dockerfile
    container_name: tripsage-airbnb-mcp
    environment:
      - AIRBNB_API_KEY=${AIRBNB_API_KEY}
    restart: unless-stopped
    networks:
      - tripsage-mcp
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: '256M'
        reservations:
          cpus: '0.25'
          memory: '128M'

  # ==========================================================================
  # BROWSER AUTOMATION MCP
  # Playwright service for web scraping and browser automation
  # ==========================================================================
  
  playwright-mcp:
    image: mcr.microsoft.com/playwright:v1.40.0-focal
    container_name: tripsage-playwright-mcp
    environment:
      - BROWSER_TYPE=chromium
    volumes:
      - /tmp/.X11-unix:/tmp/.X11-unix
    # Pin Playwright MCP version for stability
    command: npx -y playwright-mcp@1.0.0
    restart: unless-stopped
    networks:
      - tripsage-mcp
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: '1G'
        reservations:
          cpus: '0.5'
          memory: '512M'

  # ==========================================================================
  # WEB CRAWLING MCP SERVERS
  # Services for web scraping and content extraction
  # ==========================================================================
  
  crawl4ai-mcp:
    build:
      context: .
      dockerfile: Dockerfile.crawl4ai
    container_name: tripsage-crawl4ai-mcp
    environment:
      - CRAWL4AI_API_KEY=${CRAWL4AI_API_KEY}
    restart: unless-stopped
    networks:
      - tripsage-mcp
    deploy:
      resources:
        limits:
          cpus: '0.75'
          memory: '512M'
        reservations:
          cpus: '0.5'
          memory: '256M'

  firecrawl-mcp:
    image: node:20-alpine
    container_name: tripsage-firecrawl-mcp
    environment:
      - FIRECRAWL_API_KEY=${FIRECRAWL_API_KEY}
    # Pin Firecrawl MCP server version
    command: npx -y @mendableai/firecrawl-mcp-server@1.0.0
    restart: unless-stopped
    networks:
      - tripsage-mcp
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: '256M'
        reservations:
          cpus: '0.25'
          memory: '128M'

  # ==========================================================================
  # LOCATION AND UTILITY MCP SERVERS
  # Mock/stub services for location, time, and weather data
  # ==========================================================================
  
  google-maps-mcp:
    build:
      context: ./dev_services/google_maps_mcp
      dockerfile: Dockerfile
    container_name: tripsage-googlemaps-mcp
    environment:
      - GOOGLE_MAPS_API_KEY=${GOOGLE_MAPS_API_KEY}
    restart: unless-stopped
    networks:
      - tripsage-mcp
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: '256M'
        reservations:
          cpus: '0.25'
          memory: '128M'

  time-mcp:
    image: node:20-alpine
    container_name: tripsage-time-mcp
    # Official Anthropic time MCP server
    command: npx -y @anthropics/mcp-time@1.0.0
    restart: unless-stopped
    networks:
      - tripsage-mcp
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: '128M'
        reservations:
          cpus: '0.1'
          memory: '64M'

  weather-mcp:
    image: node:20-alpine
    container_name: tripsage-weather-mcp
    environment:
      - OPENWEATHERMAP_API_KEY=${OPENWEATHERMAP_API_KEY}
    # Mock weather service for local development
    command: npx -y weather-mcp-server@1.0.0
    restart: unless-stopped
    networks:
      - tripsage-mcp
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: '256M'
        reservations:
          cpus: '0.25'
          memory: '128M'

  google-calendar-mcp:
    image: node:20-alpine
    container_name: tripsage-calendar-mcp
    environment:
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
    # Mock Google Calendar service for local development
    command: npx -y google-calendar-mcp@1.0.0
    restart: unless-stopped
    networks:
      - tripsage-mcp
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: '256M'
        reservations:
          cpus: '0.25'
          memory: '128M'

  # ==========================================================================
  # CACHE MCP SERVER (FUTURE)
  # Redis cache service - enabled via profiles
  # ==========================================================================
  
  redis-mcp:
    image: node:20-alpine
    container_name: tripsage-redis-mcp
    environment:
      - REDIS_URL=${REDIS_URL}
    # Mock Redis cache service for local development
    command: npx -y redis-mcp@1.0.0
    restart: unless-stopped
    networks:
      - tripsage-mcp
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: '256M'
        reservations:
          cpus: '0.25'
          memory: '128M'
    profiles:
      - future

# ==========================================================================
# NETWORK CONFIGURATION
# Isolated network for MCP services communication
# ==========================================================================

networks:
  tripsage-mcp:
    driver: bridge
    name: tripsage-mcp-network
    driver_opts:
      com.docker.network.bridge.name: tripsage-mcp0