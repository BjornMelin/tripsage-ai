name: Unified CI

on:
  push:
    branches: [main, develop, feat/*, "session/*"]
  pull_request:
    branches: [main, develop]
  schedule:
    # Daily coverage analysis at 3 AM UTC
    - cron: '0 3 * * *'
  workflow_dispatch:
    inputs:
      skip_expensive_tests:
        description: 'Skip expensive tests (E2E, performance)'
        required: false
        default: 'false'
        type: boolean

concurrency:
  group: ci-${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  issues: write
  pull-requests: write
  checks: write

env:
  # Python
  PYTHON_VERSION_PRIMARY: "3.12"
  PYTHON_VERSIONS: '["3.11", "3.12", "3.13"]'
  BACKEND_COVERAGE_THRESHOLD: 85
  # Node
  NODE_VERSION: '20'
  PNPM_VERSION: '9'
  FRONTEND_COVERAGE_THRESHOLD: 80
  # Caching
  CACHE_VERSION: 'v1'
  # Retry
  MAX_RETRIES: 3
  RETRY_DELAY: 5

jobs:
  # ====================
  # Path Filter Analysis
  # ====================
  changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      backend: ${{ steps.filter.outputs.backend }}
      frontend: ${{ steps.filter.outputs.frontend }}
      workflows: ${{ steps.filter.outputs.workflows }}
      docs: ${{ steps.filter.outputs.docs }}
      any: ${{ steps.filter.outputs.any }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          fetch-depth: 2

      - name: Check paths
        uses: dorny/paths-filter@4512585405083f25c027a35db413c2b3b9006d50 # v2.11.1
        id: filter
        with:
          filters: |
            backend:
              - '**.py'
              - 'requirements*.txt'
              - 'pyproject.toml'
              - 'pytest.ini'
              - 'ruff.toml'
              - 'supabase/**'
              - 'scripts/**'
            frontend:
              - 'frontend/**'
              - '!frontend/**/*.md'
            workflows:
              - '.github/workflows/**'
            docs:
              - '**.md'
              - 'docs/**'
            any:
              - '**'

  # ====================
  # Backend Jobs
  # ====================
  backend-quality:
    name: Backend Code Quality
    needs: changes
    if: needs.changes.outputs.backend == 'true' || needs.changes.outputs.workflows == 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 15
    outputs:
      python-cache-key: ${{ steps.cache-key.outputs.key }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      - name: Set up Python
        uses: actions/setup-python@82c7e631bb3cdc910f68e0081d67478d79c6982d # v5.1.0
        with:
          python-version: ${{ env.PYTHON_VERSION_PRIMARY }}

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Generate cache key
        id: cache-key
        run: |
          echo "key=${{ runner.os }}-${{ env.CACHE_VERSION }}-uv-${{ hashFiles('**/requirements*.txt', '**/pyproject.toml') }}" >> $GITHUB_OUTPUT

      - name: Cache uv dependencies
        uses: actions/cache@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9 # v4.0.2
        with:
          path: ~/.cache/uv
          key: ${{ steps.cache-key.outputs.key }}
          restore-keys: |
            ${{ runner.os }}-${{ env.CACHE_VERSION }}-uv-

      - name: Install dependencies
        run: |
          uv venv
          source .venv/bin/activate
          uv pip install -r requirements.txt
          uv pip install -r requirements-dev.txt

      - name: Security scan with bandit
        id: bandit
        run: |
          source .venv/bin/activate
          uv pip install bandit[toml]
          bandit -r tripsage/ tripsage_core/ -f json -o bandit-report.json --config pyproject.toml || true
          bandit -r tripsage/ tripsage_core/ -ll --config pyproject.toml

      - name: Lint with ruff
        id: ruff
        run: |
          source .venv/bin/activate
          uv pip install ruff>=0.11.13
          ruff check . --output-format=github
          ruff format . --check

      - name: Type check with mypy
        id: mypy
        continue-on-error: true
        run: |
          source .venv/bin/activate
          uv pip install mypy types-redis types-passlib
          mypy tripsage/ tripsage_core/ --ignore-missing-imports

      - name: Check for hardcoded secrets
        id: secrets
        run: |
          if git grep -i "fallback-secret\|development-only" . \
            | grep -v "tripsage_core/config/base_app_settings.py" \
            | grep -v "tests/unit/tripsage_core/test_config.py" \
            | grep -v "tests/unit/tripsage_core/test_config_enhanced.py" \
            | grep -v "scripts/security_validation.py" \
            | grep -v "docs/" \
            | grep -v "\.github/workflows/" \
            | grep -v "CLAUDE\.md" \
            | grep -v "README\.md" \
            | grep -v "CHECKLIST\.md" ; then
            echo "❌ Hardcoded secrets detected!"
            exit 1
          else
            echo "✅ No hardcoded secrets found"
          fi

      - name: RLS Security Checks
        id: rls
        run: |
          echo "🔒 Checking Row Level Security policies..."
          if [ ! -f "supabase/migrations/20250616_02_targeted_rls_fixes.sql" ]; then
            echo "❌ Critical RLS security migration missing!"
            exit 1
          fi
          
          tables=("trips" "memories" "flights" "accommodations" "notifications")
          for table in "${tables[@]}"; do
            if grep -q "CREATE POLICY.*ON $table" supabase/migrations/*.sql; then
              echo "✅ RLS policies found for $table"
            else
              echo "⚠️ Warning: No RLS policies found for $table in migrations"
            fi
          done

      - name: Upload security artifacts
        uses: actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3 # v4.3.1
        if: always()
        with:
          name: backend-security-reports
          path: |
            bandit-report.json
          retention-days: 7

  backend-tests:
    name: Backend Tests (Python ${{ matrix.python-version }}, ${{ matrix.os }}, ${{ matrix.db }})
    needs: [changes, backend-quality]
    if: needs.changes.outputs.backend == 'true' || needs.changes.outputs.workflows == 'true'
    runs-on: ${{ matrix.os }}
    timeout-minutes: 25
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.11", "3.12", "3.13"]
        os: [ubuntu-latest]
        db: [postgres]
        include:
          # Add critical tests on other OS
          - python-version: "3.12"
            os: windows-latest
            db: sqlite
          - python-version: "3.12"
            os: macos-latest
            db: sqlite

    services:
      postgres:
        image: ${{ matrix.db == 'postgres' && 'postgres:16' || '' }}
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: tripsage_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      dragonfly:
        image: ${{ matrix.os == 'ubuntu-latest' && 'docker.dragonflydb.io/dragonflydb/dragonfly:latest' || '' }}
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@82c7e631bb3cdc910f68e0081d67478d79c6982d # v5.1.0
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install uv
        run: |
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            powershell -c "irm https://astral.sh/uv/install.ps1 | iex"
            echo "$USERPROFILE/.cargo/bin" >> $GITHUB_PATH
          else
            curl -LsSf https://astral.sh/uv/install.sh | sh
            echo "$HOME/.cargo/bin" >> $GITHUB_PATH
          fi
        shell: bash

      - name: Cache uv dependencies
        uses: actions/cache@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9 # v4.0.2
        with:
          path: |
            ~/.cache/uv
            ~/AppData/Local/uv/cache
          key: ${{ runner.os }}-${{ env.CACHE_VERSION }}-uv-${{ matrix.python-version }}-${{ hashFiles('**/requirements*.txt', '**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-${{ env.CACHE_VERSION }}-uv-${{ matrix.python-version }}-
            ${{ runner.os }}-${{ env.CACHE_VERSION }}-uv-

      - name: Install dependencies
        run: |
          uv venv
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            .venv\Scripts\activate
          else
            source .venv/bin/activate
          fi
          uv pip install -r requirements.txt
          uv pip install -r requirements-dev.txt
        shell: bash

      - name: Wait for services (Linux only)
        if: matrix.os == 'ubuntu-latest'
        run: |
          if [[ "${{ matrix.db }}" == "postgres" ]]; then
            sudo apt-get update && sudo apt-get install -y postgresql-client
            timeout 60 bash -c 'until pg_isready -h localhost -p 5432; do echo "Waiting for postgres..."; sleep 2; done'
          fi
          sudo apt-get install -y redis-tools
          timeout 60 bash -c 'until redis-cli -h localhost -p 6379 ping; do echo "Waiting for dragonfly..."; sleep 2; done'

      - name: Run unit tests with retry
        env:
          ENV: testing
          PYTHONPATH: .
          # Database
          SUPABASE_URL: https://test-project.supabase.co
          SUPABASE_ANON_KEY: test-anon-key
          SUPABASE_SERVICE_KEY: test-service-key
          DATABASE_URL: ${{ matrix.db == 'postgres' && 'postgresql://postgres:postgres@localhost:5432/tripsage_test' || 'sqlite:///test.db' }}
          # DragonflyDB
          DRAGONFLY_URL: ${{ matrix.os == 'ubuntu-latest' && 'redis://localhost:6379/0' || 'redis://mock:6379/0' }}
          DRAGONFLY_PASSWORD: ""
          # API Keys (test values)
          OPENAI_API_KEY: test-key
          ANTHROPIC_API_KEY: test-key
          DUFFEL_API_KEY: test-key
          GOOGLE_MAPS_API_KEY: test-key
          # Test configuration
          PYTEST_TIMEOUT: 300
        run: |
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            source .venv/Scripts/activate
          else
            source .venv/bin/activate
          fi
          
          # Run tests with retry logic
          for i in {1..${{ env.MAX_RETRIES }}}; do
            if uv run pytest tests/unit/ \
              --cov=tripsage \
              --cov=tripsage_core \
              --cov-report=xml:coverage-${{ matrix.python-version }}-${{ matrix.os }}.xml \
              --cov-report=term-missing \
              --cov-report=html:coverage-html-${{ matrix.python-version }}-${{ matrix.os }} \
              --cov-fail-under=${{ env.BACKEND_COVERAGE_THRESHOLD }} \
              --junitxml=test-results-${{ matrix.python-version }}-${{ matrix.os }}.xml \
              -v --tb=short; then
              echo "✅ Tests passed on attempt $i"
              break
            else
              if [ $i -eq ${{ env.MAX_RETRIES }} ]; then
                echo "❌ Tests failed after ${{ env.MAX_RETRIES }} attempts"
                exit 1
              fi
              echo "⚠️ Tests failed on attempt $i, retrying in ${{ env.RETRY_DELAY }} seconds..."
              sleep ${{ env.RETRY_DELAY }}
            fi
          done
        shell: bash

      - name: Upload test results
        uses: actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3 # v4.3.1
        if: always()
        with:
          name: backend-test-results-${{ matrix.python-version }}-${{ matrix.os }}
          path: |
            test-results-${{ matrix.python-version }}-${{ matrix.os }}.xml
            coverage-${{ matrix.python-version }}-${{ matrix.os }}.xml
            coverage-html-${{ matrix.python-version }}-${{ matrix.os }}/
          retention-days: 7

      - name: Upload coverage to Codecov
        if: matrix.python-version == env.PYTHON_VERSION_PRIMARY && matrix.os == 'ubuntu-latest'
        uses: codecov/codecov-action@e28ff129e5465c2c0dcc6f003fc735cb6ae0c673 # v4.5.0
        with:
          file: ./coverage-${{ matrix.python-version }}-${{ matrix.os }}.xml
          flags: unittests,backend,${{ matrix.os }},${{ matrix.python-version }}
          name: backend-coverage-${{ matrix.python-version }}
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

  backend-integration:
    name: Backend Integration Tests
    needs: [changes, backend-quality]
    if: (needs.changes.outputs.backend == 'true' || needs.changes.outputs.workflows == 'true') && (github.event_name == 'pull_request' || github.ref == 'refs/heads/main')
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: tripsage_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      dragonfly:
        image: docker.dragonflydb.io/dragonflydb/dragonfly:latest
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      - name: Set up Python
        uses: actions/setup-python@82c7e631bb3cdc910f68e0081d67478d79c6982d # v5.1.0
        with:
          python-version: ${{ env.PYTHON_VERSION_PRIMARY }}

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Cache uv dependencies
        uses: actions/cache@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9 # v4.0.2
        with:
          path: ~/.cache/uv
          key: ${{ needs.backend-quality.outputs.python-cache-key }}
          restore-keys: |
            ${{ runner.os }}-${{ env.CACHE_VERSION }}-uv-

      - name: Install dependencies
        run: |
          uv venv
          source .venv/bin/activate
          uv pip install -r requirements.txt
          uv pip install -r requirements-dev.txt

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y redis-tools postgresql-client

      - name: Wait for services
        run: |
          timeout 60 bash -c 'until pg_isready -h localhost -p 5432; do echo "Waiting for postgres..."; sleep 2; done'
          timeout 60 bash -c 'until redis-cli -h localhost -p 6379 ping; do echo "Waiting for dragonfly..."; sleep 2; done'

      - name: Run database migrations
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/tripsage_test
        run: |
          source .venv/bin/activate
          python scripts/database/run_migrations.py || echo "Migrations may not be ready yet"

      - name: Run integration tests with retry
        env:
          ENV: testing
          PYTHONPATH: .
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/tripsage_test
          DRAGONFLY_URL: redis://localhost:6379/0
          SUPABASE_URL: https://test-project.supabase.co
          SUPABASE_ANON_KEY: test-anon-key
          SUPABASE_SERVICE_KEY: test-service-key
          OPENAI_API_KEY: test-key
          ANTHROPIC_API_KEY: test-key
          DUFFEL_API_KEY: test-key
          GOOGLE_MAPS_API_KEY: test-key
        run: |
          source .venv/bin/activate
          
          # Run with retry
          for i in {1..${{ env.MAX_RETRIES }}}; do
            if uv run pytest tests/integration/ \
              --junitxml=integration-results.xml \
              -v --tb=short \
              --timeout=300; then
              echo "✅ Integration tests passed on attempt $i"
              break
            else
              if [ $i -eq ${{ env.MAX_RETRIES }} ]; then
                echo "❌ Integration tests failed after ${{ env.MAX_RETRIES }} attempts"
                exit 1
              fi
              echo "⚠️ Integration tests failed on attempt $i, retrying..."
              sleep ${{ env.RETRY_DELAY }}
            fi
          done

      - name: Run RLS Security Tests
        env:
          ENV: testing
          PYTHONPATH: .
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/tripsage_test
          SUPABASE_URL: ${{ secrets.SUPABASE_URL || 'https://test-project.supabase.co' }}
          SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY || 'test-anon-key' }}
          SUPABASE_SERVICE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY || 'test-service-key' }}
        run: |
          source .venv/bin/activate
          echo "🔒 Running RLS security validation tests..."
          
          uv run pytest tests/database/test_rls_policies.py \
            --junitxml=rls-test-results.xml \
            -v --tb=short || echo "⚠️ Mock RLS tests may need updates"

      - name: Upload integration test results
        uses: actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3 # v4.3.1
        if: always()
        with:
          name: backend-integration-results
          path: |
            integration-results.xml
            rls-test-results.xml
          retention-days: 7

  # ====================
  # Frontend Jobs
  # ====================
  frontend-quality:
    name: Frontend Code Quality
    needs: changes
    if: needs.changes.outputs.frontend == 'true' || needs.changes.outputs.workflows == 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 15
    defaults:
      run:
        working-directory: ./frontend
    outputs:
      pnpm-cache-key: ${{ steps.cache-key.outputs.key }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      - name: Setup pnpm
        uses: pnpm/action-setup@fe02b34f77f8bc703788d5817da081398fad5dd2 # v4.0.0
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8 # v4.0.2
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: 'frontend/pnpm-lock.yaml'

      - name: Generate cache key
        id: cache-key
        run: |
          echo "key=${{ runner.os }}-${{ env.CACHE_VERSION }}-pnpm-${{ hashFiles('frontend/pnpm-lock.yaml') }}" >> $GITHUB_OUTPUT

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Security audit
        id: audit
        continue-on-error: true
        run: |
          pnpm audit --audit-level moderate --json > security-audit.json || echo "Audit completed with warnings"
          pnpm audit --audit-level moderate || echo "Security issues found - see details above"

      - name: Lint with Biome
        id: biome
        run: |
          pnpm biome check --reporter=github .
          if ! pnpm biome format .; then
            echo "❌ Files need formatting. Run 'pnpm biome format . --write' to fix."
            exit 1
          fi

      - name: TypeScript type check
        id: typecheck
        run: pnpm type-check

      - name: Check for TODO/FIXME comments
        id: todos
        continue-on-error: true
        run: |
          if grep -r "TODO\|FIXME\|XXX\|HACK" src/ --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx"; then
            echo "ℹ️ TODO/FIXME comments found - consider addressing them"
          else
            echo "✅ No TODO/FIXME comments found"
          fi

      - name: Upload security artifacts
        uses: actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3 # v4.3.1
        if: always()
        with:
          name: frontend-security-reports
          path: |
            frontend/security-audit.json
          retention-days: 7

  frontend-tests:
    name: Frontend Tests
    needs: [changes, frontend-quality]
    if: needs.changes.outputs.frontend == 'true' || needs.changes.outputs.workflows == 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 20
    defaults:
      run:
        working-directory: ./frontend
    
    steps:
      - name: Checkout code
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      - name: Setup pnpm
        uses: pnpm/action-setup@fe02b34f77f8bc703788d5817da081398fad5dd2 # v4.0.0
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8 # v4.0.2
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: 'frontend/pnpm-lock.yaml'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run unit tests with coverage
        run: |
          pnpm test:coverage --reporter=verbose --reporter=junit --outputFile=test-results.xml
        env:
          COVERAGE_THRESHOLD: ${{ env.FRONTEND_COVERAGE_THRESHOLD }}

      - name: Check coverage threshold
        run: |
          if [ -f coverage/coverage-summary.json ]; then
            COVERAGE=$(node -e "
              const fs = require('fs');
              const data = JSON.parse(fs.readFileSync('coverage/coverage-summary.json', 'utf8'));
              console.log(data.total.lines.pct);
            ")
            echo "Current coverage: $COVERAGE%"
            echo "Required threshold: ${{ env.FRONTEND_COVERAGE_THRESHOLD }}%"
            
            THRESHOLD_MET=$(node -e "console.log(parseFloat('$COVERAGE') >= ${{ env.FRONTEND_COVERAGE_THRESHOLD }})")
            if [ "$THRESHOLD_MET" = "false" ]; then
              echo "❌ Coverage threshold not met!"
              exit 1
            else
              echo "✅ Coverage threshold met!"
            fi
          else
            echo "⚠️ Coverage report not found"
            exit 1
          fi

      - name: Upload test results
        uses: actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3 # v4.3.1
        if: always()
        with:
          name: frontend-test-results
          path: |
            frontend/test-results.xml
            frontend/coverage/
          retention-days: 7

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@e28ff129e5465c2c0dcc6f003fc735cb6ae0c673 # v4.5.0
        with:
          directory: ./frontend
          flags: frontend,unittests
          name: frontend-coverage
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

  frontend-e2e:
    name: Frontend E2E Tests
    needs: [changes, frontend-quality]
    if: (needs.changes.outputs.frontend == 'true' || needs.changes.outputs.workflows == 'true') && (github.event_name == 'pull_request' || github.ref == 'refs/heads/main') && github.event.inputs.skip_expensive_tests != 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 30
    defaults:
      run:
        working-directory: ./frontend
    
    steps:
      - name: Checkout code
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      - name: Setup pnpm
        uses: pnpm/action-setup@fe02b34f77f8bc703788d5817da081398fad5dd2 # v4.0.0
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8 # v4.0.2
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: 'frontend/pnpm-lock.yaml'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Cache Playwright browsers
        uses: actions/cache@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9 # v4.0.2
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-${{ env.CACHE_VERSION }}-playwright-${{ hashFiles('frontend/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-${{ env.CACHE_VERSION }}-playwright-

      - name: Install Playwright browsers
        run: pnpm playwright install --with-deps

      - name: Build application for E2E tests
        run: pnpm build
        env:
          NODE_ENV: test

      - name: Run E2E tests with retry
        run: |
          for i in {1..${{ env.MAX_RETRIES }}}; do
            if pnpm test:e2e; then
              echo "✅ E2E tests passed on attempt $i"
              break
            else
              if [ $i -eq ${{ env.MAX_RETRIES }} ]; then
                echo "❌ E2E tests failed after ${{ env.MAX_RETRIES }} attempts"
                exit 1
              fi
              echo "⚠️ E2E tests failed on attempt $i, retrying..."
              sleep ${{ env.RETRY_DELAY }}
            fi
          done
        env:
          CI: true

      - name: Upload E2E test results
        uses: actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3 # v4.3.1
        if: always()
        with:
          name: e2e-test-results
          path: |
            frontend/playwright-report/
            frontend/test-results/
          retention-days: 7

  # ====================
  # Build Validation
  # ====================
  backend-build:
    name: Backend Build Validation
    needs: [changes, backend-quality]
    if: needs.changes.outputs.backend == 'true' || needs.changes.outputs.workflows == 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      - name: Set up Python
        uses: actions/setup-python@82c7e631bb3cdc910f68e0081d67478d79c6982d # v5.1.0
        with:
          python-version: ${{ env.PYTHON_VERSION_PRIMARY }}

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Cache uv dependencies
        uses: actions/cache@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9 # v4.0.2
        with:
          path: ~/.cache/uv
          key: ${{ needs.backend-quality.outputs.python-cache-key }}
          restore-keys: |
            ${{ runner.os }}-${{ env.CACHE_VERSION }}-uv-

      - name: Install build dependencies
        run: |
          uv venv
          source .venv/bin/activate
          uv pip install build wheel setuptools

      - name: Build distribution packages
        run: |
          source .venv/bin/activate
          python -m build

      - name: Validate package structure
        run: |
          source .venv/bin/activate
          uv pip install twine
          twine check dist/*

      - name: Test package installation
        run: |
          source .venv/bin/activate
          uv pip install dist/*.whl
          python -c "import tripsage; import tripsage_core; print('✅ Package imports successful')"

      - name: Generate OpenAPI schema
        env:
          PYTHONPATH: .
          SUPABASE_URL: https://docs-gen.supabase.co
          SUPABASE_ANON_KEY: docs-gen-key
          OPENAI_API_KEY: docs-gen-key
        run: |
          source .venv/bin/activate
          uv pip install -r requirements.txt
          python -c "
          from tripsage.api.main import app
          import json
          schema = app.openapi()
          with open('openapi-schema.json', 'w') as f:
              json.dump(schema, f, indent=2)
          print('✅ OpenAPI schema generated successfully')
          "

      - name: Validate OpenAPI schema
        run: |
          source .venv/bin/activate
          uv pip install openapi-spec-validator
          python -c "
          from openapi_spec_validator import validate_spec
          import json
          with open('openapi-schema.json') as f:
              spec = json.load(f)
          validate_spec(spec)
          print('✅ OpenAPI schema is valid')
          "

      - name: Upload build artifacts
        uses: actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3 # v4.3.1
        with:
          name: backend-build-artifacts
          path: |
            dist/
            openapi-schema.json
          retention-days: 7

  frontend-build:
    name: Frontend Build Validation (${{ matrix.build-mode }})
    needs: [changes, frontend-quality]
    if: needs.changes.outputs.frontend == 'true' || needs.changes.outputs.workflows == 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 15
    defaults:
      run:
        working-directory: ./frontend
    strategy:
      matrix:
        build-mode: [production, development]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      - name: Setup pnpm
        uses: pnpm/action-setup@fe02b34f77f8bc703788d5817da081398fad5dd2 # v4.0.0
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8 # v4.0.2
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: 'frontend/pnpm-lock.yaml'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Cache Next.js build
        uses: actions/cache@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9 # v4.0.2
        with:
          path: |
            ./frontend/.next/cache
          key: ${{ runner.os }}-${{ env.CACHE_VERSION }}-nextjs-${{ matrix.build-mode }}-${{ hashFiles('frontend/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-${{ env.CACHE_VERSION }}-nextjs-${{ matrix.build-mode }}-
            ${{ runner.os }}-${{ env.CACHE_VERSION }}-nextjs-

      - name: Build application (${{ matrix.build-mode }})
        run: |
          if [ "${{ matrix.build-mode }}" = "production" ]; then
            pnpm build
          else
            NODE_ENV=development pnpm build
          fi
        env:
          NODE_ENV: ${{ matrix.build-mode }}

      - name: Check build output
        run: |
          echo "Build completed successfully for ${{ matrix.build-mode }} mode"
          ls -la .next/
          
          if [ ! -f .next/BUILD_ID ]; then
            echo "❌ BUILD_ID missing"
            exit 1
          fi
          
          if [ ! -d .next/static ]; then
            echo "❌ Static assets missing"
            exit 1
          fi
          
          echo "✅ Build validation passed"

      - name: Bundle size analysis
        if: matrix.build-mode == 'production'
        run: |
          BUNDLE_SIZE=$(du -sh .next/ | cut -f1)
          echo "Bundle size: $BUNDLE_SIZE"
          
          BUNDLE_SIZE_MB=$(du -sm .next/ | cut -f1)
          if [ "$BUNDLE_SIZE_MB" -gt 500 ]; then
            echo "⚠️ Bundle size is quite large: ${BUNDLE_SIZE_MB}MB"
          else
            echo "✅ Bundle size is reasonable: ${BUNDLE_SIZE_MB}MB"
          fi

      - name: Upload build artifacts
        if: matrix.build-mode == 'production'
        uses: actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3 # v4.3.1
        with:
          name: frontend-build-${{ matrix.build-mode }}
          path: |
            frontend/.next/
            frontend/public/
          retention-days: 3

  # ====================
  # Performance & Security
  # ====================
  performance-tests:
    name: Performance Tests
    needs: [changes, backend-quality, frontend-quality]
    if: github.event_name == 'pull_request' && github.event.inputs.skip_expensive_tests != 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: tripsage_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      dragonfly:
        image: docker.dragonflydb.io/dragonflydb/dragonfly:latest
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      - name: Backend Performance Tests
        if: needs.changes.outputs.backend == 'true'
        run: |
          # Set up Python
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
          
          uv venv
          source .venv/bin/activate
          uv pip install -r requirements.txt
          uv pip install -r requirements-dev.txt
          
          # Run performance tests
          uv run pytest tests/performance/ \
            --benchmark-json=backend-performance.json \
            -v --tb=short || echo "Performance tests may be incomplete"
        env:
          ENV: testing
          PYTHONPATH: .
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/tripsage_test
          DRAGONFLY_URL: redis://localhost:6379/0
          SUPABASE_URL: https://test-project.supabase.co
          SUPABASE_ANON_KEY: test-anon-key
          OPENAI_API_KEY: test-key

      - name: Frontend Performance Tests
        if: needs.changes.outputs.frontend == 'true'
        run: |
          cd frontend
          
          # Setup Node.js and pnpm
          npm install -g pnpm@${{ env.PNPM_VERSION }}
          pnpm install --frozen-lockfile
          pnpm build
          
          # Install Lighthouse CI
          npm install -g @lhci/cli
          
          # Start app
          pnpm start &
          APP_PID=$!
          echo $APP_PID > app.pid
          
          # Wait for app
          timeout 60 bash -c 'until curl -f http://localhost:3000 2>/dev/null; do echo "Waiting for app..."; sleep 2; done'
          
          # Run Lighthouse
          lhci autorun --config=./lighthouse.config.js || echo "Lighthouse completed with issues"
          
          # Cleanup
          kill $(cat app.pid) || echo "Process already stopped"
        env:
          PORT: 3000

      - name: Upload performance results
        uses: actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3 # v4.3.1
        if: always()
        with:
          name: performance-results
          path: |
            backend-performance.json
            frontend/.lighthouseci/
          retention-days: 7

  security-scan:
    name: Security Scan
    needs: changes
    if: needs.changes.outputs.any == 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 20
    permissions:
      contents: read
      security-events: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@6e7b7d1fd3e4fef0c5fa8cce1229c54b2c9bd0d8 # v0.24.0
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@4fa2a7953630fd2f3fb380f21be14ede0169dd4f # v3.25.12
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run dependency review
        if: github.event_name == 'pull_request'
        uses: actions/dependency-review-action@72eb03d02c7872a771aacd928f3123ac62ad6d3a # v4.3.3

  # ====================
  # Coverage Analysis
  # ====================
  coverage-analysis:
    name: Coverage Analysis
    needs: [backend-tests, frontend-tests]
    if: always() && (needs.backend-tests.result == 'success' || needs.frontend-tests.result == 'success')
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      - name: Download all coverage artifacts
        uses: actions/download-artifact@c850b930e6ba138125429b7e5c93fc707a7f8427 # v4.1.4
        with:
          pattern: "*-test-results-*"
          merge-multiple: true

      - name: Download frontend coverage
        uses: actions/download-artifact@c850b930e6ba138125429b7e5c93fc707a7f8427 # v4.1.4
        with:
          name: frontend-test-results
          path: frontend-coverage

      - name: Generate coverage report
        run: |
          echo "## 📊 Coverage Report" > coverage-report.md
          echo "" >> coverage-report.md
          
          # Backend coverage
          if ls coverage-*.xml 1> /dev/null 2>&1; then
            echo "### Backend Coverage" >> coverage-report.md
            for file in coverage-*.xml; do
              echo "Processing $file"
            done
          fi
          
          # Frontend coverage
          if [ -f frontend-coverage/coverage/coverage-summary.json ]; then
            echo "### Frontend Coverage" >> coverage-report.md
            COVERAGE=$(node -e "
              const fs = require('fs');
              const data = JSON.parse(fs.readFileSync('frontend-coverage/coverage/coverage-summary.json', 'utf8'));
              console.log(data.total.lines.pct);
            ")
            echo "- Total Coverage: ${COVERAGE}%" >> coverage-report.md
          fi

      - name: Post coverage comment
        if: github.event_name == 'pull_request'
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          script: |
            const fs = require('fs');
            const coverageReport = fs.readFileSync('coverage-report.md', 'utf8');
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: coverageReport
            });

  # ====================
  # Quality Gates
  # ====================
  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [
      changes,
      backend-quality,
      backend-tests,
      backend-build,
      frontend-quality,
      frontend-tests,
      frontend-build
    ]
    if: always()
    
    steps:
      - name: Check job results
        run: |
          echo "=== Quality Gate Results ==="
          echo "Changes detected:"
          echo "  Backend: ${{ needs.changes.outputs.backend }}"
          echo "  Frontend: ${{ needs.changes.outputs.frontend }}"
          echo ""
          
          # Check backend jobs if backend changed
          if [ "${{ needs.changes.outputs.backend }}" = "true" ]; then
            echo "Backend Results:"
            echo "  Quality: ${{ needs.backend-quality.result }}"
            echo "  Tests: ${{ needs.backend-tests.result }}"
            echo "  Build: ${{ needs.backend-build.result }}"
            
            if [ "${{ needs.backend-quality.result }}" != "success" ] || \
               [ "${{ needs.backend-tests.result }}" != "success" ] || \
               [ "${{ needs.backend-build.result }}" != "success" ]; then
              echo "❌ Backend quality gate failed"
              exit 1
            fi
          fi
          
          # Check frontend jobs if frontend changed
          if [ "${{ needs.changes.outputs.frontend }}" = "true" ]; then
            echo "Frontend Results:"
            echo "  Quality: ${{ needs.frontend-quality.result }}"
            echo "  Tests: ${{ needs.frontend-tests.result }}"
            echo "  Build: ${{ needs.frontend-build.result }}"
            
            if [ "${{ needs.frontend-quality.result }}" != "success" ] || \
               [ "${{ needs.frontend-tests.result }}" != "success" ] || \
               [ "${{ needs.frontend-build.result }}" != "success" ]; then
              echo "❌ Frontend quality gate failed"
              exit 1
            fi
          fi
          
          echo "✅ All quality gates passed!"

  # ====================
  # Reusable Workflow Call
  # ====================
  trigger-deployment:
    name: Trigger Deployment
    needs: quality-gate
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    uses: ./.github/workflows/deploy.yml
    secrets: inherit
    with:
      environment: production