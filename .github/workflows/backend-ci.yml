name: Backend CI

on:
  push:
    branches: [main, develop, feat/*, "session/*"]
    paths:
      - '**.py'
      - 'requirements*.txt'
      - 'pyproject.toml'
      - 'pytest.ini'
      - 'ruff.toml'
      - 'supabase/**'
      - 'scripts/**'
      - '.github/workflows/backend-ci.yml'
      - '.github/actions/**'
  pull_request:
    branches: [main, develop]
    paths:
      - '**.py'
      - 'requirements*.txt'
      - 'pyproject.toml'
      - 'pytest.ini'
      - 'ruff.toml'
      - 'supabase/**'
      - 'scripts/**'
      - '.github/workflows/backend-ci.yml'
      - '.github/actions/**'
  workflow_dispatch:
    inputs:
      skip_expensive_tests:
        description: 'Skip expensive tests (integration, performance)'
        required: false
        default: 'false'
        type: boolean

concurrency:
  group: backend-ci-${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  issues: write
  pull-requests: write
  checks: write

env:
  PYTHON_VERSION_PRIMARY: "3.12"
  PYTHON_VERSIONS: '[\"3.11\", \"3.12\", \"3.13\"]'
  BACKEND_COVERAGE_THRESHOLD: 85
  CACHE_VERSION: 'v1'
  MAX_RETRIES: 3
  RETRY_DELAY: 5

jobs:
  # ====================
  # Backend Code Quality
  # ====================
  backend-quality:
    name: Backend Code Quality
    runs-on: ubuntu-latest
    timeout-minutes: 15
    outputs:
      python-cache-key: ${{ steps.cache-key.outputs.key }}

    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 2

      - name: Setup Python Environment
        uses: ./.github/actions/setup-python
        with:
          python-version: ${{ env.PYTHON_VERSION_PRIMARY }}
          cache-dependency-path: 'pyproject.toml'

      - name: Generate cache key
        id: cache-key
        run: |
          echo "key=${{ runner.os }}-${{ env.CACHE_VERSION }}-python-${{ env.PYTHON_VERSION_PRIMARY }}-${{ hashFiles('**/requirements*.txt', '**/pyproject.toml') }}" >> $GITHUB_OUTPUT

      - name: Run ruff linting
        run: |
          echo "::group::Running ruff linting"
          ruff check . --output-format=github
          echo "::endgroup::"

      - name: Run ruff formatting
        run: |
          echo "::group::Checking ruff formatting"
          ruff format . --check
          echo "::endgroup::"

      - name: Type checking with mypy
        run: |
          echo "::group::Running mypy type checking"
          mypy . --config-file=pyproject.toml
          echo "::endgroup::"

      - name: Check import sorting
        run: |
          echo "::group::Checking import sorting"
          ruff check . --select I --diff
          echo "::endgroup::"

  # ====================
  # Backend Testing
  # ====================
  backend-tests:
    name: Backend Tests (Python ${{ matrix.python-version }})
    needs: backend-quality
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.11', '3.12', '3.13']
        os: [ubuntu-latest, windows-latest]
        exclude:
          # Only test Python 3.11 and 3.13 on Ubuntu for speed
          - os: windows-latest
            python-version: '3.11'
          - os: windows-latest
            python-version: '3.13'

    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Setup Python Environment
        uses: ./.github/actions/setup-python
        with:
          python-version: ${{ matrix.python-version }}
          cache-dependency-path: 'pyproject.toml'

      - name: Install dependencies
        run: |
          echo "::group::Installing dependencies"
          uv sync --frozen
          echo "::endgroup::"

      - name: Run unit tests with retry
        run: |
          echo "::group::Running unit tests"
          for i in {1..${{ env.MAX_RETRIES }}}; do
            if uv run pytest tests/unit/ -v --tb=short --cov=tripsage --cov-report=xml --cov-report=term; then
              break
            elif [ $i -eq ${{ env.MAX_RETRIES }} ]; then
              echo "Unit tests failed after ${{ env.MAX_RETRIES }} attempts"
              exit 1
            fi
            echo "Attempt $i failed, retrying in ${{ env.RETRY_DELAY }} seconds..."
            sleep ${{ env.RETRY_DELAY }}
          done
          echo "::endgroup::"

      - name: Upload unit test coverage
        if: matrix.python-version == env.PYTHON_VERSION_PRIMARY && matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: unit-coverage-${{ github.run_id }}
          path: coverage.xml
          retention-days: 7

  # ====================
  # Integration Tests
  # ====================
  backend-integration:
    name: Backend Integration Tests
    needs: backend-quality
    if: github.event.inputs.skip_expensive_tests != 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: tripsage_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      dragonfly:
        image: docker.dragonflydb.io/dragonflydb/dragonfly:latest
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Setup Python Environment
        uses: ./.github/actions/setup-python
        with:
          python-version: ${{ env.PYTHON_VERSION_PRIMARY }}
          cache-dependency-path: 'pyproject.toml'

      - name: Install dependencies
        run: |
          echo "::group::Installing dependencies"
          uv sync --frozen
          echo "::endgroup::"

      - name: Wait for services
        run: |
          echo "::group::Waiting for services to be ready"
          timeout 30 bash -c 'until pg_isready -h localhost -p 5432; do sleep 1; done'
          timeout 30 bash -c 'until redis-cli -h localhost -p 6379 ping; do sleep 1; done'
          echo "::endgroup::"

      - name: Run integration tests with retry
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/tripsage_test
          REDIS_URL: redis://localhost:6379
        run: |
          echo "::group::Running integration tests"
          for i in {1..${{ env.MAX_RETRIES }}}; do
            if uv run pytest tests/integration/ -v --tb=short --cov=tripsage --cov-report=xml --cov-report=term; then
              break
            elif [ $i -eq ${{ env.MAX_RETRIES }} ]; then
              echo "Integration tests failed after ${{ env.MAX_RETRIES }} attempts"
              exit 1
            fi
            echo "Attempt $i failed, retrying in ${{ env.RETRY_DELAY }} seconds..."
            sleep ${{ env.RETRY_DELAY }}
          done
          echo "::endgroup::"

      - name: Upload integration test coverage
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: integration-coverage-${{ github.run_id }}
          path: coverage.xml
          retention-days: 7

  # ====================
  # Backend Build Test
  # ====================
  backend-build:
    name: Backend Build Test
    needs: backend-quality
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Setup Python Environment
        uses: ./.github/actions/setup-python
        with:
          python-version: ${{ env.PYTHON_VERSION_PRIMARY }}
          cache-dependency-path: 'pyproject.toml'

      - name: Install build dependencies
        run: |
          echo "::group::Installing build dependencies"
          uv add --dev build wheel
          echo "::endgroup::"

      - name: Build package
        run: |
          echo "::group::Building Python package"
          uv run python -m build
          echo "::endgroup::"

      - name: Verify package contents
        run: |
          echo "::group::Verifying package contents"
          ls -la dist/
          uv run python -m twine check dist/*
          echo "::endgroup::"

  # ====================
  # Coverage Analysis
  # ====================
  backend-coverage:
    name: Backend Coverage Analysis
    needs: [backend-tests, backend-integration]
    if: always() && (needs.backend-tests.result == 'success' || needs.backend-integration.result == 'success')
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Setup Python Environment
        uses: ./.github/actions/setup-python
        with:
          python-version: ${{ env.PYTHON_VERSION_PRIMARY }}
          cache-dependency-path: 'pyproject.toml'

      - name: Download coverage artifacts
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
        with:
          pattern: "*coverage-${{ github.run_id }}"
          path: coverage-reports
          merge-multiple: true

      - name: Combine coverage reports
        run: |
          echo "::group::Combining coverage reports"
          ls -la coverage-reports/
          coverage combine coverage-reports/
          coverage report --show-missing
          coverage xml
          echo "::endgroup::"

      - name: Check coverage threshold
        run: |
          echo "::group::Checking coverage threshold"
          COVERAGE=$(coverage report --format=total)
          echo "Current coverage: ${COVERAGE}%"
          if [ "$COVERAGE" -lt "${{ env.BACKEND_COVERAGE_THRESHOLD }}" ]; then
            echo "❌ Coverage $COVERAGE% is below threshold ${{ env.BACKEND_COVERAGE_THRESHOLD }}%"
            exit 1
          else
            echo "✅ Coverage $COVERAGE% meets threshold ${{ env.BACKEND_COVERAGE_THRESHOLD }}%"
          fi
          echo "::endgroup::"

      - name: Upload combined coverage to Codecov
        uses: codecov/codecov-action@5a1091511ad55cbe89839c7260b706298ca349f7 # v5.5.1
        with:
          file: coverage.xml
          flags: backend
          name: backend-coverage
          fail_ci_if_error: false

      - name: Upload coverage artifact
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: backend-final-coverage-${{ github.run_id }}
          path: |
            coverage.xml
            htmlcov/
          retention-days: 30

  # ====================
  # Backend Quality Gate
  # ====================
  backend-quality-gate:
    name: Backend Quality Gate
    needs: [backend-quality, backend-tests, backend-integration, backend-build, backend-coverage]
    if: always()
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: Check quality gate
        run: |
          echo "::group::Backend Quality Gate Results"
          
          # Check each job result
          quality_result="${{ needs.backend-quality.result }}"
          tests_result="${{ needs.backend-tests.result }}"
          integration_result="${{ needs.backend-integration.result }}"
          build_result="${{ needs.backend-build.result }}"
          coverage_result="${{ needs.backend-coverage.result }}"
          
          echo "Quality checks: $quality_result"
          echo "Unit tests: $tests_result"
          echo "Integration tests: $integration_result"
          echo "Build: $build_result"
          echo "Coverage: $coverage_result"
          
          # Determine overall result
          failed_jobs=0
          
          if [ "$quality_result" != "success" ]; then
            echo "❌ Quality checks failed"
            failed_jobs=$((failed_jobs + 1))
          fi
          
          if [ "$tests_result" != "success" ]; then
            echo "❌ Unit tests failed"
            failed_jobs=$((failed_jobs + 1))
          fi
          
          if [ "$integration_result" != "success" ] && [ "$integration_result" != "skipped" ]; then
            echo "❌ Integration tests failed"
            failed_jobs=$((failed_jobs + 1))
          fi
          
          if [ "$build_result" != "success" ]; then
            echo "❌ Build failed"
            failed_jobs=$((failed_jobs + 1))
          fi
          
          if [ "$coverage_result" != "success" ] && [ "$coverage_result" != "skipped" ]; then
            echo "❌ Coverage analysis failed"
            failed_jobs=$((failed_jobs + 1))
          fi
          
          if [ $failed_jobs -eq 0 ]; then
            echo "✅ All backend quality checks passed!"
          else
            echo "❌ $failed_jobs backend quality check(s) failed"
            exit 1
          fi
          echo "::endgroup::"

      - name: Update PR status
        if: github.event_name == 'pull_request'
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          script: |
            const { owner, repo } = context.repo;
            const pull_number = context.payload.pull_request.number;
            
            const statusText = '${{ needs.backend-quality-gate.result }}' === 'success' 
              ? '✅ Backend quality checks passed'
              : '❌ Backend quality checks failed';
            
            await github.rest.issues.createComment({
              owner,
              repo,
              issue_number: pull_number,
              body: `## Backend CI Results\n\n${statusText}\n\n- Quality: ${{ needs.backend-quality.result }}\n- Tests: ${{ needs.backend-tests.result }}\n- Integration: ${{ needs.backend-integration.result }}\n- Build: ${{ needs.backend-build.result }}\n- Coverage: ${{ needs.backend-coverage.result }}`
            });