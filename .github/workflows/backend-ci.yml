name: Backend CI

on:
  push:
    branches: [ main, develop, feat/*, "session/*" ]
    paths:
      - '**.py'
      - 'requirements*.txt'
      - 'pyproject.toml'
      - 'pytest.ini'
      - '.github/workflows/backend-ci.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - '**.py'
      - 'requirements*.txt'
      - 'pyproject.toml'
      - 'pytest.ini'
      - '.github/workflows/backend-ci.yml'
  workflow_dispatch:  # Allow manual triggering

concurrency:
  group: backend-ci-${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  PYTHON_VERSION: "3.12"  # Primary Python version for standardization
  COVERAGE_THRESHOLD: 85   # Coverage threshold (allowing some flexibility during development)

jobs:
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    timeout-minutes: 15
    outputs:
      python-cache-key: ${{ steps.cache-key.outputs.key }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install uv
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH

    - name: Generate cache key
      id: cache-key
      run: |
        echo "key=${{ runner.os }}-uv-${{ hashFiles('**/requirements*.txt', '**/pyproject.toml') }}" >> $GITHUB_OUTPUT

    - name: Cache uv dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/uv
        key: ${{ steps.cache-key.outputs.key }}
        restore-keys: |
          ${{ runner.os }}-uv-

    - name: Install dependencies
      run: |
        uv venv
        source .venv/bin/activate
        uv pip install -r requirements.txt
        uv pip install -r requirements-dev.txt

    - name: Security scan with bandit
      run: |
        source .venv/bin/activate
        uv pip install bandit[toml]
        bandit -r tripsage/ tripsage_core/ -f json -o bandit-report.json --config pyproject.toml || true
        bandit -r tripsage/ tripsage_core/ -ll --config pyproject.toml  # Show results

    - name: Lint with ruff
      run: |
        source .venv/bin/activate
        # Ensure ruff is installed (it's in requirements-dev.txt but double-check)
        uv pip install ruff>=0.11.13
        ruff check . --output-format=github
        ruff format . --check

    - name: Type check with mypy
      run: |
        source .venv/bin/activate
        uv pip install mypy types-redis types-passlib
        mypy tripsage/ tripsage_core/ --ignore-missing-imports || true

    - name: Check for hardcoded secrets
      run: |
        # Check for hardcoded secrets but exclude legitimate config validation and test files
        if git grep -i "fallback-secret\|development-only" . \
          | grep -v "tripsage_core/config/base_app_settings.py" \
          | grep -v "tests/unit/tripsage_core/test_config_enhanced.py" \
          | grep -v "scripts/security_validation.py" \
          | grep -v "docs/" ; then
          echo "❌ Hardcoded secrets detected!"
          exit 1
        else
          echo "✅ No hardcoded secrets found"
        fi

    - name: Upload security artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
        retention-days: 7

  unit-tests:
    name: Unit Tests (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    timeout-minutes: 25
    needs: code-quality
    strategy:
      fail-fast: false  # Don't cancel other jobs if one fails
      matrix:
        python-version: ["3.11", "3.12", "3.13"]

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: tripsage_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      dragonfly:
        image: docker.dragonflydb.io/dragonflydb/dragonfly:latest
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install uv
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH

    - name: Cache uv dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/uv
        key: ${{ needs.code-quality.outputs.python-cache-key }}
        restore-keys: |
          ${{ runner.os }}-uv-

    - name: Install dependencies
      run: |
        uv venv
        source .venv/bin/activate
        uv pip install -r requirements.txt
        uv pip install -r requirements-dev.txt

    - name: Wait for services
      run: |
        timeout 60 bash -c 'until pg_isready -h localhost -p 5432; do echo "Waiting for postgres..."; sleep 2; done'
        timeout 60 bash -c 'until redis-cli -h localhost -p 6379 ping; do echo "Waiting for dragonfly..."; sleep 2; done'

    - name: Run unit tests with coverage
      env:
        ENV: test
        PYTHONPATH: .
        # Database
        SUPABASE_URL: https://test-project.supabase.co
        SUPABASE_ANON_KEY: test-anon-key
        SUPABASE_SERVICE_KEY: test-service-key
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/tripsage_test
        # DragonflyDB
        DRAGONFLY_URL: redis://localhost:6379/0
        DRAGONFLY_PASSWORD: ""
        DRAGONFLY_TTL_SHORT: 300
        DRAGONFLY_TTL_MEDIUM: 3600
        DRAGONFLY_TTL_LONG: 86400
        # API Keys (test values)
        OPENAI_API_KEY: test-key
        ANTHROPIC_API_KEY: test-key
        DUFFEL_API_KEY: test-key
        GOOGLE_MAPS_API_KEY: test-key
        # Test configuration
        PYTEST_TIMEOUT: 300
      run: |
        source .venv/bin/activate
        uv run pytest tests/unit/ \
          --cov=tripsage \
          --cov=tripsage_core \
          --cov-report=xml:coverage-${{ matrix.python-version }}.xml \
          --cov-report=term-missing \
          --cov-report=html:coverage-html-${{ matrix.python-version }} \
          --cov-fail-under=${{ env.COVERAGE_THRESHOLD }} \
          --junitxml=test-results-${{ matrix.python-version }}.xml \
          -v --tb=short

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          test-results-${{ matrix.python-version }}.xml
          coverage-${{ matrix.python-version }}.xml
          coverage-html-${{ matrix.python-version }}/
        retention-days: 7

    - name: Upload coverage to Codecov
      if: matrix.python-version == env.PYTHON_VERSION
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage-${{ matrix.python-version }}.xml
        flags: unittests,backend
        name: backend-coverage
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN }}

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [code-quality, unit-tests]
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
    
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: tripsage_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      dragonfly:
        image: docker.dragonflydb.io/dragonflydb/dragonfly:latest
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install uv
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH

    - name: Cache uv dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/uv
        key: ${{ needs.code-quality.outputs.python-cache-key }}
        restore-keys: |
          ${{ runner.os }}-uv-

    - name: Install dependencies
      run: |
        uv venv
        source .venv/bin/activate
        uv pip install -r requirements.txt
        uv pip install -r requirements-dev.txt

    - name: Wait for services
      run: |
        timeout 60 bash -c 'until pg_isready -h localhost -p 5432; do echo "Waiting for postgres..."; sleep 2; done'
        timeout 60 bash -c 'until redis-cli -h localhost -p 6379 ping; do echo "Waiting for dragonfly..."; sleep 2; done'

    - name: Run database migrations
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/tripsage_test
      run: |
        source .venv/bin/activate
        python scripts/database/run_migrations.py || echo "Migrations may not be ready yet"

    - name: Run integration tests
      env:
        ENV: test
        PYTHONPATH: .
        # Database
        SUPABASE_URL: https://test-project.supabase.co
        SUPABASE_ANON_KEY: test-anon-key
        SUPABASE_SERVICE_KEY: test-service-key
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/tripsage_test
        # DragonflyDB
        DRAGONFLY_URL: redis://localhost:6379/0
        DRAGONFLY_PASSWORD: ""
        # API Keys (test values)
        OPENAI_API_KEY: test-key
        ANTHROPIC_API_KEY: test-key
        DUFFEL_API_KEY: test-key
        GOOGLE_MAPS_API_KEY: test-key
      run: |
        source .venv/bin/activate
        uv run pytest tests/integration/ \
          --junitxml=integration-results.xml \
          -v --tb=short \
          --timeout=300

    - name: Upload integration test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: integration-test-results
        path: integration-results.xml
        retention-days: 7

  build-validation:
    name: Build Validation
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: code-quality
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install uv
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH

    - name: Cache uv dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/uv
        key: ${{ needs.code-quality.outputs.python-cache-key }}
        restore-keys: |
          ${{ runner.os }}-uv-

    - name: Install build dependencies
      run: |
        uv venv
        source .venv/bin/activate
        uv pip install build wheel setuptools

    - name: Build distribution packages
      run: |
        source .venv/bin/activate
        python -m build

    - name: Validate package structure
      run: |
        source .venv/bin/activate
        uv pip install twine
        twine check dist/*

    - name: Test package installation
      run: |
        source .venv/bin/activate
        uv pip install dist/*.whl
        python -c "import tripsage; import tripsage_core; print('✅ Package imports successful')"

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: distribution-packages
        path: dist/
        retention-days: 7

  api-docs-validation:
    name: API Documentation Validation
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: code-quality
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install uv
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH

    - name: Install dependencies
      run: |
        uv venv
        source .venv/bin/activate
        uv pip install -r requirements.txt

    - name: Generate OpenAPI schema
      env:
        PYTHONPATH: .
        # Minimal environment for API docs generation
        SUPABASE_URL: https://docs-gen.supabase.co
        SUPABASE_ANON_KEY: docs-gen-key
        OPENAI_API_KEY: docs-gen-key
      run: |
        source .venv/bin/activate
        python -c "
        from tripsage.api.main import app
        import json
        schema = app.openapi()
        with open('openapi-schema.json', 'w') as f:
            json.dump(schema, f, indent=2)
        print('✅ OpenAPI schema generated successfully')
        "

    - name: Validate OpenAPI schema
      run: |
        source .venv/bin/activate
        uv pip install openapi-spec-validator
        python -c "
        from openapi_spec_validator import validate_spec
        import json
        with open('openapi-schema.json') as f:
            spec = json.load(f)
        validate_spec(spec)
        print('✅ OpenAPI schema is valid')
        "

  performance-tests:
    name: Performance Baseline
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: code-quality
    if: github.event_name == 'pull_request'
    
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: tripsage_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      dragonfly:
        image: docker.dragonflydb.io/dragonflydb/dragonfly:latest
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install uv
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH

    - name: Install dependencies
      run: |
        uv venv
        source .venv/bin/activate
        uv pip install -r requirements.txt
        uv pip install -r requirements-dev.txt

    - name: Run performance tests
      env:
        ENV: test
        PYTHONPATH: .
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/tripsage_test
        DRAGONFLY_URL: redis://localhost:6379/0
        SUPABASE_URL: https://test-project.supabase.co
        SUPABASE_ANON_KEY: test-anon-key
        OPENAI_API_KEY: test-key
      run: |
        source .venv/bin/activate
        uv run pytest tests/performance/ \
          --benchmark-json=performance-results.json \
          -v --tb=short || echo "Performance tests may be incomplete"

    - name: Upload performance results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: performance-results
        path: performance-results.json
        retention-days: 7

  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [code-quality, unit-tests, build-validation, api-docs-validation]
    if: always()
    
    steps:
    - name: Check job results
      run: |
        echo "Code Quality: ${{ needs.code-quality.result }}"
        echo "Unit Tests: ${{ needs.unit-tests.result }}"
        echo "Build Validation: ${{ needs.build-validation.result }}"
        echo "API Docs: ${{ needs.api-docs-validation.result }}"
        
        # Fail if any critical job failed
        if [ "${{ needs.code-quality.result }}" != "success" ]; then
          echo "❌ Code quality checks failed"
          exit 1
        fi
        
        if [ "${{ needs.unit-tests.result }}" != "success" ]; then
          echo "❌ Unit tests failed"
          exit 1
        fi
        
        if [ "${{ needs.build-validation.result }}" != "success" ]; then
          echo "❌ Build validation failed"
          exit 1
        fi
        
        if [ "${{ needs.api-docs-validation.result }}" != "success" ]; then
          echo "❌ API documentation validation failed"
          exit 1
        fi
        
        echo "✅ All quality gates passed!"