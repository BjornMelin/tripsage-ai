name: Example Composite Actions Usage
# This workflow demonstrates how to use the composite actions

on:
  workflow_dispatch:  # Manual trigger for testing

env:
  PYTHON_VERSION: "3.13"
  NODE_VERSION: "20"

jobs:
  # Example: Python setup and testing
  python-example:
    name: Python Setup Example
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@0a12ed9d6a96ab950c8b015e8b2e358ef21d60d0 # v4.2.0
      
      # Use the Python setup composite action
      - name: Setup Python environment
        uses: ./.github/actions/setup-python
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          install-dependencies: true
      
      # Run tests with the setup environment
      - name: Run Python tests
        run: |
          source .venv/bin/activate
          uv run pytest tests/unit/ -v
      
      # Run linting
      - name: Run linting
        run: |
          source .venv/bin/activate
          ruff check . --fix
          ruff format .

  # Example: Node.js setup and building
  node-example:
    name: Node.js Setup Example
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@0a12ed9d6a96ab950c8b015e8b2e358ef21d60d0 # v4.2.0
      
      # Use the Node.js setup composite action
      - name: Setup Node.js environment
        uses: ./.github/actions/setup-node
        with:
          node-version: ${{ env.NODE_VERSION }}
          pnpm-version: '9'
          working-directory: 'frontend'
      
      # Run frontend tests
      - name: Run frontend tests
        working-directory: frontend
        run: |
          pnpm test
          pnpm test:e2e
      
      # Build frontend
      - name: Build frontend
        working-directory: frontend
        run: pnpm build

  # Example: Security scanning
  security-example:
    name: Security Scan Example
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@0a12ed9d6a96ab950c8b015e8b2e358ef21d60d0 # v4.2.0
      
      # Setup Python for backend scanning
      - name: Setup Python
        uses: ./.github/actions/setup-python
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          install-dependencies: false  # Security scan will handle deps
      
      # Run comprehensive security scan
      - name: Run security scans
        uses: ./.github/actions/security-scan
        with:
          scan-python: true
          scan-frontend: true
          fail-on-severity: 'medium'
          upload-sarif: true

  # Example: Full CI pipeline using composite actions
  full-ci-example:
    name: Full CI Pipeline Example
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: tripsage_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      dragonfly:
        image: docker.dragonflydb.io/dragonflydb/dragonfly:latest
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - uses: actions/checkout@0a12ed9d6a96ab950c8b015e8b2e358ef21d60d0 # v4.2.0
      
      # Setup Python environment
      - name: Setup Python
        id: setup-python
        uses: ./.github/actions/setup-python
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      # Setup Node.js environment
      - name: Setup Node.js
        id: setup-node
        uses: ./.github/actions/setup-node
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      # Run security scans
      - name: Security scanning
        uses: ./.github/actions/security-scan
        with:
          fail-on-severity: 'high'
      
      # Run backend tests
      - name: Run backend tests
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/tripsage_test
          DRAGONFLY_URL: redis://localhost:6379/0
          SUPABASE_URL: https://test-project.supabase.co
          SUPABASE_ANON_KEY: test-anon-key
          OPENAI_API_KEY: test-key
        run: |
          source .venv/bin/activate
          uv run pytest tests/unit/ --cov=tripsage --cov-report=xml
      
      # Run frontend tests
      - name: Run frontend tests
        working-directory: frontend
        run: |
          pnpm test
          pnpm build
      
      # Output composite action results
      - name: Display results
        run: |
          echo "Python version: ${{ steps.setup-python.outputs.python-version }}"
          echo "Python cache hit: ${{ steps.setup-python.outputs.cache-hit }}"
          echo "Node version: ${{ steps.setup-node.outputs.node-version }}"
          echo "pnpm version: ${{ steps.setup-node.outputs.pnpm-version }}"
          echo "Node cache hit: ${{ steps.setup-node.outputs.cache-hit }}"

  # Example: Matrix testing with composite actions
  matrix-example:
    name: Matrix Testing (${{ matrix.python-version }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12", "3.13"]
    
    steps:
      - uses: actions/checkout@0a12ed9d6a96ab950c8b015e8b2e358ef21d60d0 # v4.2.0
      
      - name: Setup Python ${{ matrix.python-version }}
        uses: ./.github/actions/setup-python
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Run tests
        run: |
          source .venv/bin/activate
          python --version
          uv run pytest tests/unit/ -v --tb=short