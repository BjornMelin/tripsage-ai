name: Frontend CI

on:
  push:
    branches: [main, develop, feat/*, "session/*"]
    paths:
      - 'frontend/**'
      - '.github/workflows/frontend-ci-simple.yml'
  pull_request:
    branches: [main, develop]
    paths:
      - 'frontend/**'
      - '.github/workflows/frontend-ci-simple.yml'
  workflow_dispatch:  # Allow manual triggering

concurrency:
  group: frontend-ci-${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

defaults:
  run:
    working-directory: ./frontend

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '9'
  COVERAGE_THRESHOLD: 80  # Frontend coverage threshold

jobs:
  code-quality:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    timeout-minutes: 15
    outputs:
      pnpm-cache-key: ${{ steps.cache-key.outputs.key }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: 'frontend/pnpm-lock.yaml'

      - name: Generate cache key
        id: cache-key
        run: |
          echo "key=${{ runner.os }}-pnpm-${{ hashFiles('frontend/pnpm-lock.yaml') }}" >> $GITHUB_OUTPUT

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Security audit
        run: |
          pnpm audit --audit-level moderate --json > security-audit.json || echo "Audit completed with warnings"
          pnpm audit --audit-level moderate || echo "Security issues found - see details above"

      - name: Lint with Biome
        run: |
          pnpm biome check --reporter=github .
          # Check if files need formatting by running format without --write and checking exit code
          if ! pnpm biome format .; then
            echo "❌ Files need formatting. Run 'pnpm biome format . --write' to fix."
            exit 1
          fi

      - name: TypeScript type check
        run: pnpm type-check

      - name: Check for TODO/FIXME comments
        run: |
          if grep -r "TODO\|FIXME\|XXX\|HACK" src/ --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx"; then
            echo "ℹ️ TODO/FIXME comments found - consider addressing them"
          else
            echo "✅ No TODO/FIXME comments found"
          fi

      - name: Upload security artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: frontend-security-reports
          path: |
            frontend/security-audit.json
          retention-days: 7

  unit-tests:
    name: Unit Tests & Coverage
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: code-quality
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: 'frontend/pnpm-lock.yaml'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run unit tests with coverage
        run: |
          pnpm test:coverage --reporter=verbose --reporter=junit --outputFile=test-results.xml
        env:
          COVERAGE_THRESHOLD: ${{ env.COVERAGE_THRESHOLD }}

      - name: Check coverage threshold
        run: |
          # Extract coverage percentage from coverage report
          if [ -f coverage/coverage-summary.json ]; then
            COVERAGE=$(node -e "
              const fs = require('fs');
              const data = JSON.parse(fs.readFileSync('coverage/coverage-summary.json', 'utf8'));
              console.log(data.total.lines.pct);
            ")
            echo "Current coverage: $COVERAGE%"
            echo "Required threshold: ${{ env.COVERAGE_THRESHOLD }}%"
            
            # Use node to do floating point comparison
            THRESHOLD_MET=$(node -e "console.log(parseFloat('$COVERAGE') >= ${{ env.COVERAGE_THRESHOLD }})")
            if [ "$THRESHOLD_MET" = "false" ]; then
              echo "❌ Coverage threshold not met!"
              exit 1
            else
              echo "✅ Coverage threshold met!"
            fi
          else
            echo "⚠️ Coverage report not found"
            exit 1
          fi

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: frontend-test-results
          path: |
            frontend/test-results.xml
            frontend/coverage/
          retention-days: 7

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          directory: ./frontend
          flags: frontend,unittests
          name: frontend-coverage
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: code-quality
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: 'frontend/pnpm-lock.yaml'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Playwright browsers
        run: pnpm playwright install --with-deps

      - name: Build application for E2E tests
        run: pnpm build
        env:
          NODE_ENV: test

      - name: Run E2E tests
        run: pnpm test:e2e
        env:
          CI: true

      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-test-results
          path: |
            frontend/playwright-report/
            frontend/test-results/
          retention-days: 7

  build-validation:
    name: Build Validation
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: code-quality
    strategy:
      matrix:
        build-mode: [production, development]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: 'frontend/pnpm-lock.yaml'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Cache Next.js build
        uses: actions/cache@v4
        with:
          path: |
            ./frontend/.next/cache
          key: ${{ runner.os }}-nextjs-${{ matrix.build-mode }}-${{ hashFiles('frontend/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ matrix.build-mode }}-
            ${{ runner.os }}-nextjs-

      - name: Build application (${{ matrix.build-mode }})
        run: |
          if [ "${{ matrix.build-mode }}" = "production" ]; then
            pnpm build
          else
            NODE_ENV=development pnpm build
          fi
        env:
          NODE_ENV: ${{ matrix.build-mode }}

      - name: Check build output
        run: |
          echo "Build completed successfully for ${{ matrix.build-mode }} mode"
          ls -la .next/
          
          # Check for critical files
          if [ ! -f .next/BUILD_ID ]; then
            echo "❌ BUILD_ID missing"
            exit 1
          fi
          
          if [ ! -d .next/static ]; then
            echo "❌ Static assets missing"
            exit 1
          fi
          
          echo "✅ Build validation passed"

      - name: Bundle size analysis
        if: matrix.build-mode == 'production'
        run: |
          # Basic bundle size check
          BUNDLE_SIZE=$(du -sh .next/ | cut -f1)
          echo "Bundle size: $BUNDLE_SIZE"
          
          # Check for overly large bundles (basic check)
          BUNDLE_SIZE_MB=$(du -sm .next/ | cut -f1)
          if [ "$BUNDLE_SIZE_MB" -gt 500 ]; then
            echo "⚠️ Bundle size is quite large: ${BUNDLE_SIZE_MB}MB"
          else
            echo "✅ Bundle size is reasonable: ${BUNDLE_SIZE_MB}MB"
          fi

      - name: Upload build artifacts
        if: matrix.build-mode == 'production'
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build-${{ matrix.build-mode }}
          path: |
            frontend/.next/
            frontend/public/
          retention-days: 3

  accessibility-tests:
    name: Accessibility Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: code-quality
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: 'frontend/pnpm-lock.yaml'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build application
        run: pnpm build

      - name: Start application
        run: |
          pnpm start &
          APP_PID=$!
          echo $APP_PID > app.pid
          
          # Wait for app to be ready
          timeout 60 bash -c 'until curl -f http://localhost:3000/api/health 2>/dev/null; do echo "Waiting for app..."; sleep 2; done' || echo "App may not have health endpoint"
        env:
          PORT: 3000

      - name: Run accessibility tests
        run: |
          # Install and run axe-core CLI for accessibility testing
          npx @axe-core/cli http://localhost:3000 --exit || echo "Accessibility issues found"
          
          # You could also add pa11y or lighthouse-ci here
          npx pa11y http://localhost:3000 --reporter json > a11y-results.json || echo "Pa11y completed with issues"

      - name: Cleanup
        if: always()
        run: |
          if [ -f app.pid ]; then
            kill $(cat app.pid) || echo "Process already stopped"
          fi

      - name: Upload accessibility results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: accessibility-results
          path: |
            frontend/a11y-results.json
          retention-days: 7

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    timeout-minutes: 25
    needs: code-quality
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: 'frontend/pnpm-lock.yaml'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build application
        run: pnpm build

      - name: Run Lighthouse CI
        run: |
          # Install Lighthouse CI
          npm install -g @lhci/cli
          
          # Start app for performance testing
          pnpm start &
          APP_PID=$!
          echo $APP_PID > app.pid
          
          # Wait for app
          timeout 60 bash -c 'until curl -f http://localhost:3000 2>/dev/null; do echo "Waiting for app..."; sleep 2; done'
          
          # Run Lighthouse CI
          lhci autorun --config=./lighthouse.config.js || echo "Lighthouse completed with issues"
        env:
          PORT: 3000

      - name: Cleanup
        if: always()
        run: |
          if [ -f app.pid ]; then
            kill $(cat app.pid) || echo "Process already stopped"
          fi

      - name: Upload performance results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-results
          path: |
            frontend/.lighthouseci/
          retention-days: 7

  quality-gate:
    name: Frontend Quality Gate
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [code-quality, unit-tests, build-validation]
    if: always()
    
    steps:
      - name: Check job results
        run: |
          echo "Code Quality: ${{ needs.code-quality.result }}"
          echo "Unit Tests: ${{ needs.unit-tests.result }}"
          echo "Build Validation: ${{ needs.build-validation.result }}"
          
          # Fail if any critical job failed
          if [ "${{ needs.code-quality.result }}" != "success" ]; then
            echo "❌ Code quality checks failed"
            exit 1
          fi
          
          if [ "${{ needs.unit-tests.result }}" != "success" ]; then
            echo "❌ Unit tests failed"
            exit 1
          fi
          
          if [ "${{ needs.build-validation.result }}" != "success" ]; then
            echo "❌ Build validation failed"
            exit 1
          fi
          
          echo "✅ All frontend quality gates passed!"
          
          # Report on optional jobs
          echo ""
          echo "Optional job results:"
          echo "E2E Tests: ${{ needs.e2e-tests.result || 'skipped' }}"
          echo "Accessibility: ${{ needs.accessibility-tests.result || 'skipped' }}"
          echo "Performance: ${{ needs.performance-tests.result || 'skipped' }}"