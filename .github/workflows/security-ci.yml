name: Security CI

on:
  push:
    branches: [main, develop, feat/*, "session/*"]
  pull_request:
    branches: [main, develop]
  schedule:
    # Daily security scans at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      scan_level:
        description: 'Security scan level'
        required: false
        default: 'standard'
        type: choice
        options:
          - 'standard'
          - 'comprehensive'

concurrency:
  group: security-ci-${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  security-events: write
  issues: write
  pull-requests: write

env:
  PYTHON_VERSION: "3.12"
  NODE_VERSION: '20'
  PNPM_VERSION: '9'

jobs:
  # ====================
  # Security Scanning
  # ====================
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout code
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          fetch-depth: 2

      - name: Setup Python Environment
        uses: ./.github/actions/setup-python
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache-dependency-path: 'pyproject.toml'

      - name: Setup Node.js Environment (for frontend scanning)
        uses: ./.github/actions/setup-node
        with:
          node-version: ${{ env.NODE_VERSION }}
          pnpm-version: ${{ env.PNPM_VERSION }}
          working-directory: frontend

      - name: Run comprehensive security scan
        uses: ./.github/actions/security-scan
        with:
          scan-python: 'true'
          scan-frontend: 'true'
          python-path: '.'
          frontend-path: 'frontend'
          fail-on-severity: 'high'
          upload-sarif: 'true'

      - name: Upload security reports
        if: always()
        uses: actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3 # v4.3.1
        with:
          name: security-reports-${{ github.run_id }}
          path: security-reports/
          retention-days: 30

  # ====================
  # Dependency Scanning
  # ====================
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      - name: Setup Python Environment
        uses: ./.github/actions/setup-python
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache-dependency-path: 'pyproject.toml'

      - name: Run dependency review
        uses: actions/dependency-review-action@72eb03d02c7872a771aacd928f3123ac62ad6d3a # v4.3.3
        with:
          fail-on-severity: high
          allow-licenses: MIT, Apache-2.0, BSD-3-Clause, BSD-2-Clause, ISC

      - name: Python dependency scanning with Safety
        run: |
          echo "::group::Python dependency vulnerability scan"
          pip install safety
          safety check --json > safety-report.json || true
          safety check || echo "Vulnerabilities found, check report"
          echo "::endgroup::"

      - name: Setup Node.js for frontend deps
        working-directory: frontend
        run: |
          echo "::group::Frontend dependency vulnerability scan"
          npm install -g pnpm@${{ env.PNPM_VERSION }}
          pnpm install --frozen-lockfile
          pnpm audit --json > ../pnpm-audit.json || true
          pnpm audit || echo "Vulnerabilities found, check report"
          echo "::endgroup::"

      - name: Upload dependency reports
        if: always()
        uses: actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3 # v4.3.1
        with:
          name: dependency-reports-${{ github.run_id }}
          path: |
            safety-report.json
            pnpm-audit.json
          retention-days: 30

  # ====================
  # Container Security
  # ====================
  container-security:
    name: Container Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: github.event.inputs.scan_level == 'comprehensive' || github.event_name == 'schedule'

    steps:
      - name: Checkout code
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      - name: Build Docker image
        run: |
          echo "::group::Building Docker image for scanning"
          if [ -f "Dockerfile" ]; then
            docker build -t tripsage-security-scan .
          else
            echo "No Dockerfile found, creating minimal image for scanning"
            echo "FROM python:3.12-slim" > Dockerfile.security
            echo "WORKDIR /app" >> Dockerfile.security
            echo "COPY . ." >> Dockerfile.security
            docker build -f Dockerfile.security -t tripsage-security-scan .
          fi
          echo "::endgroup::"

      - name: Run Trivy container scan
        uses: aquasecurity/trivy-action@6e7b7d1fd3e4fef0c5fa8cce1229c54b2c9bd0d8 # v0.24.0
        with:
          image-ref: 'tripsage-security-scan'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@4fa2a7953630fd2f3fb380f21be14ede0169dd4f # v3.25.12
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Upload container scan results
        if: always()
        uses: actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3 # v4.3.1
        with:
          name: container-scan-${{ github.run_id }}
          path: trivy-results.sarif
          retention-days: 30

  # ====================
  # Secrets Scanning
  # ====================
  secrets-scan:
    name: Secrets Scanning
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          fetch-depth: 0

      - name: Comprehensive secrets scan
        run: |
          echo "::group::Scanning for hardcoded secrets"
          
          # Enhanced patterns for secret detection
          secret_patterns=(
            "password.*=.*['\"].*['\"]"
            "api[_-]?key.*=.*['\"].*['\"]"
            "secret.*=.*['\"].*['\"]"
            "token.*=.*['\"].*['\"]"
            "bearer.*['\"].*['\"]"
            "private[_-]?key.*=.*['\"].*['\"]"
            "aws[_-]?access[_-]?key.*['\"].*['\"]"
            "aws[_-]?secret.*['\"].*['\"]"
            "github[_-]?token.*['\"].*['\"]"
            "openai[_-]?api[_-]?key.*['\"].*['\"]"
            "anthropic[_-]?api[_-]?key.*['\"].*['\"]"
            "supabase.*key.*['\"].*['\"]"
            "database[_-]?url.*['\"].*['\"]"
            "redis[_-]?url.*['\"].*['\"]"
            "smtp[_-]?password.*['\"].*['\"]"
            "-----BEGIN.*PRIVATE.*KEY-----"
            "sk-[a-zA-Z0-9]{32,}"
            "ghp_[a-zA-Z0-9]{36}"
            "gho_[a-zA-Z0-9]{36}"
            "ghu_[a-zA-Z0-9]{36}"
            "ghs_[a-zA-Z0-9]{36}"
            "ghr_[a-zA-Z0-9]{36}"
          )
          
          found_secrets=false
          echo "## Secrets Scan Results" > secrets-report.md
          echo "" >> secrets-report.md
          
          for pattern in "${secret_patterns[@]}"; do
            echo "Checking for pattern: $pattern"
            results=$(grep -r -i -E "$pattern" \
              --exclude-dir=.git \
              --exclude-dir=node_modules \
              --exclude-dir=.next \
              --exclude-dir=.venv \
              --exclude-dir=venv \
              --exclude-dir=dist \
              --exclude-dir=build \
              --exclude-dir=coverage \
              --exclude="*.min.js" \
              --exclude="*.map" \
              --exclude="*.lock" \
              --exclude="*.svg" \
              --exclude="*.png" \
              --exclude="*.jpg" \
              --exclude="*.jpeg" \
              --exclude="*.gif" \
              --exclude="secrets-report.md" \
              . 2>/dev/null || true)
            
            if [ -n "$results" ]; then
              found_secrets=true
              echo "### Pattern: $pattern" >> secrets-report.md
              echo "\`\`\`" >> secrets-report.md
              echo "$results" | head -10 >> secrets-report.md
              echo "\`\`\`" >> secrets-report.md
              echo "" >> secrets-report.md
            fi
          done
          
          # Additional checks for environment files
          if find . -name ".env*" -not -path "./.git/*" | grep -q .; then
            echo "### Environment Files Found" >> secrets-report.md
            find . -name ".env*" -not -path "./.git/*" >> secrets-report.md
            echo "" >> secrets-report.md
          fi
          
          if [ "$found_secrets" = true ]; then
            echo "❌ Potential secrets found!"
            cat secrets-report.md
            exit 1
          else
            echo "✅ No hardcoded secrets found."
            echo "No hardcoded secrets detected." >> secrets-report.md
          fi
          echo "::endgroup::"

      - name: Check for development secrets
        run: |
          echo "::group::Checking for development secrets"
          # Check for specific development secrets that should not be in production
          if git grep -i "fallback-secret\|development-only\|test-secret\|dummy-key" . | grep -v "allowed-files"; then
            echo "❌ Development secrets detected in codebase!"
            exit 1
          else
            echo "✅ No development secrets found."
          fi
          echo "::endgroup::"

      - name: Upload secrets scan results
        if: always()
        uses: actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3 # v4.3.1
        with:
          name: secrets-scan-${{ github.run_id }}
          path: secrets-report.md
          retention-days: 30

  # ====================
  # Database Security
  # ====================
  database-security:
    name: Database Security Check
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      - name: Check database migrations for security
        run: |
          echo "::group::Database security validation"
          
          # Check for RLS policies on critical tables
          critical_tables=("trips" "memories" "flights" "accommodations" "notifications" "users")
          rls_report="database-security-report.md"
          echo "# Database Security Report" > $rls_report
          echo "" >> $rls_report
          
          missing_rls=false
          
          for table in "${critical_tables[@]}"; do
            echo "Checking RLS policies for table: $table"
            if find supabase/migrations -name "*.sql" -exec grep -l "CREATE POLICY.*ON $table\|ALTER TABLE $table ENABLE ROW LEVEL SECURITY" {} \; | grep -q .; then
              echo "✅ RLS policies found for $table" >> $rls_report
            else
              echo "❌ No RLS policies found for $table" >> $rls_report
              missing_rls=true
            fi
          done
          
          # Check for potentially dangerous SQL patterns
          echo "" >> $rls_report
          echo "## SQL Security Checks" >> $rls_report
          
          dangerous_patterns=(
            "DROP TABLE.*CASCADE"
            "DELETE FROM.*WHERE 1=1"
            "UPDATE.*SET.*WHERE 1=1"
            "GRANT ALL"
            "CREATE USER.*SUPERUSER"
            "ALTER USER.*SUPERUSER"
          )
          
          for pattern in "${dangerous_patterns[@]}"; do
            if find supabase/migrations -name "*.sql" -exec grep -l "$pattern" {} \; | grep -q .; then
              echo "⚠️  Potentially dangerous pattern found: $pattern" >> $rls_report
              echo "Files:" >> $rls_report
              find supabase/migrations -name "*.sql" -exec grep -l "$pattern" {} \; >> $rls_report
            fi
          done
          
          cat $rls_report
          
          if [ "$missing_rls" = true ]; then
            echo "❌ Critical tables missing RLS policies!"
            exit 1
          else
            echo "✅ Database security checks passed."
          fi
          echo "::endgroup::"

      - name: Upload database security report
        if: always()
        uses: actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3 # v4.3.1
        with:
          name: database-security-${{ github.run_id }}
          path: database-security-report.md
          retention-days: 30

  # ====================
  # Security Quality Gate
  # ====================
  security-quality-gate:
    name: Security Quality Gate
    needs: [security-scan, dependency-scan, secrets-scan, database-security]
    if: always()
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: Check security quality gate
        run: |
          echo "::group::Security Quality Gate Results"
          
          # Check each security job result
          security_result="${{ needs.security-scan.result }}"
          dependency_result="${{ needs.dependency-scan.result }}"
          secrets_result="${{ needs.secrets-scan.result }}"
          database_result="${{ needs.database-security.result }}"
          container_result="${{ needs.container-security.result }}"
          
          echo "Security scan: $security_result"
          echo "Dependency scan: $dependency_result"
          echo "Secrets scan: $secrets_result"
          echo "Database security: $database_result"
          echo "Container security: $container_result"
          
          # Determine overall security result
          security_failed=false
          
          if [ "$security_result" != "success" ]; then
            echo "❌ Security scan failed"
            security_failed=true
          fi
          
          if [ "$dependency_result" != "success" ]; then
            echo "❌ Dependency scan failed"
            security_failed=true
          fi
          
          if [ "$secrets_result" != "success" ]; then
            echo "❌ Secrets scan failed"
            security_failed=true
          fi
          
          if [ "$database_result" != "success" ]; then
            echo "❌ Database security failed"
            security_failed=true
          fi
          
          # Container security is optional for non-comprehensive scans
          if [ "$container_result" != "success" ] && [ "$container_result" != "skipped" ]; then
            echo "⚠️  Container security scan failed (non-blocking)"
          fi
          
          if [ "$security_failed" = false ]; then
            echo "✅ All security checks passed!"
          else
            echo "❌ Security quality gate failed"
            exit 1
          fi
          echo "::endgroup::"

      - name: Update PR security status
        if: github.event_name == 'pull_request'
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          script: |
            const { owner, repo } = context.repo;
            const pull_number = context.payload.pull_request.number;
            
            const securityPassed = '${{ needs.security-quality-gate.result }}' === 'success';
            const statusText = securityPassed 
              ? '🔒 Security checks passed'
              : '🚨 Security checks failed';
            
            const securityIcon = securityPassed ? '✅' : '❌';
            
            await github.rest.issues.createComment({
              owner,
              repo,
              issue_number: pull_number,
              body: `## Security CI Results\n\n${statusText}\n\n- ${securityIcon} Security scan: ${{ needs.security-scan.result }}\n- ${securityIcon} Dependencies: ${{ needs.dependency-scan.result }}\n- ${securityIcon} Secrets: ${{ needs.secrets-scan.result }}\n- ${securityIcon} Database: ${{ needs.database-security.result }}\n\nPlease review any security findings before merging.`
            });

      - name: Create security issue on failure
        if: failure() && github.event_name == 'schedule'
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          script: |
            const { owner, repo } = context.repo;
            
            await github.rest.issues.create({
              owner,
              repo,
              title: `🚨 Security CI Failed - ${new Date().toISOString().split('T')[0]}`,
              body: `## Security CI Failure Report\n\nThe daily security scan has failed. Please review the security findings:\n\n- Security scan: ${{ needs.security-scan.result }}\n- Dependencies: ${{ needs.dependency-scan.result }}\n- Secrets: ${{ needs.secrets-scan.result }}\n- Database: ${{ needs.database-security.result }}\n\n**Action Required:** Review and fix security issues found in the CI run.\n\n[View CI Run](${context.payload.repository.html_url}/actions/runs/${context.runId})`,
              labels: ['security', 'bug', 'high-priority']
            });