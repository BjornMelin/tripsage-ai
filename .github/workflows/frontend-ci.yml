name: Frontend CI

on:
  push:
    branches: [main, develop, feat/*, "session/*"]
    paths:
      - 'frontend/**'
      - '!frontend/**/*.md'
      - '.github/workflows/frontend-ci.yml'
      - '.github/actions/**'
  pull_request:
    branches: [main, develop]
    paths:
      - 'frontend/**'
      - '!frontend/**/*.md'
      - '.github/workflows/frontend-ci.yml'
      - '.github/actions/**'
  workflow_dispatch:
    inputs:
      skip_expensive_tests:
        description: 'Skip expensive tests (E2E, performance)'
        required: false
        default: 'false'
        type: boolean

concurrency:
  group: frontend-ci-${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  issues: write
  pull-requests: write
  checks: write

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '9'
  FRONTEND_COVERAGE_THRESHOLD: 80
  CACHE_VERSION: 'v1'
  MAX_RETRIES: 3
  RETRY_DELAY: 5

jobs:
  # ====================
  # Frontend Code Quality
  # ====================
  frontend-quality:
    name: Frontend Code Quality
    runs-on: ubuntu-latest
    timeout-minutes: 15
    defaults:
      run:
        working-directory: frontend

    steps:
      - name: Checkout code
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      - name: Setup Node.js Environment
        uses: ./.github/actions/setup-node
        with:
          node-version: ${{ env.NODE_VERSION }}
          pnpm-version: ${{ env.PNPM_VERSION }}
          working-directory: frontend

      - name: Run Biome linting
        run: |
          echo "::group::Running Biome linting"
          npx biome lint . --reporter=github
          echo "::endgroup::"

      - name: Run Biome formatting
        run: |
          echo "::group::Checking Biome formatting"
          npx biome format . --write=false
          echo "::endgroup::"

      - name: TypeScript type checking
        run: |
          echo "::group::Running TypeScript type checking"
          npx tsc --noEmit
          echo "::endgroup::"

      - name: Check Next.js build
        run: |
          echo "::group::Checking Next.js build"
          npm run build
          echo "::endgroup::"

      - name: Upload build artifacts
        uses: actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3 # v4.3.1
        with:
          name: nextjs-build-${{ github.run_id }}
          path: |
            frontend/.next/
            !frontend/.next/cache
          retention-days: 7

  # ====================
  # Frontend Unit Tests
  # ====================
  frontend-tests:
    name: Frontend Unit Tests
    needs: frontend-quality
    runs-on: ubuntu-latest
    timeout-minutes: 20
    defaults:
      run:
        working-directory: frontend

    steps:
      - name: Checkout code
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      - name: Setup Node.js Environment
        uses: ./.github/actions/setup-node
        with:
          node-version: ${{ env.NODE_VERSION }}
          pnpm-version: ${{ env.PNPM_VERSION }}
          working-directory: frontend

      - name: Run unit tests with retry
        run: |
          echo "::group::Running Vitest unit tests"
          for i in {1..${{ env.MAX_RETRIES }}}; do
            if npm run test:ci; then
              break
            elif [ $i -eq ${{ env.MAX_RETRIES }} ]; then
              echo "Unit tests failed after ${{ env.MAX_RETRIES }} attempts"
              exit 1
            fi
            echo "Attempt $i failed, retrying in ${{ env.RETRY_DELAY }} seconds..."
            sleep ${{ env.RETRY_DELAY }}
          done
          echo "::endgroup::"

      - name: Upload test coverage
        uses: actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3 # v4.3.1
        with:
          name: frontend-coverage-${{ github.run_id }}
          path: frontend/coverage/
          retention-days: 7

  # ====================
  # Frontend E2E Tests
  # ====================
  frontend-e2e:
    name: Frontend E2E Tests
    needs: frontend-quality
    if: github.event.inputs.skip_expensive_tests != 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 30
    defaults:
      run:
        working-directory: frontend

    steps:
      - name: Checkout code
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      - name: Setup Node.js Environment
        uses: ./.github/actions/setup-node
        with:
          node-version: ${{ env.NODE_VERSION }}
          pnpm-version: ${{ env.PNPM_VERSION }}
          working-directory: frontend

      - name: Install Playwright browsers
        run: |
          echo "::group::Installing Playwright browsers"
          npx playwright install --with-deps
          echo "::endgroup::"

      - name: Download build artifacts
        uses: actions/download-artifact@c850b930e6ba138125429b7e5c93fc707a7f8427 # v4.1.4
        with:
          name: nextjs-build-${{ github.run_id }}
          path: frontend/.next

      - name: Run E2E tests with retry
        run: |
          echo "::group::Running Playwright E2E tests"
          for i in {1..${{ env.MAX_RETRIES }}}; do
            if npm run test:e2e; then
              break
            elif [ $i -eq ${{ env.MAX_RETRIES }} ]; then
              echo "E2E tests failed after ${{ env.MAX_RETRIES }} attempts"
              exit 1
            fi
            echo "Attempt $i failed, retrying in ${{ env.RETRY_DELAY }} seconds..."
            sleep ${{ env.RETRY_DELAY }}
          done
          echo "::endgroup::"

      - name: Upload E2E test results
        if: always()
        uses: actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3 # v4.3.1
        with:
          name: playwright-report-${{ github.run_id }}
          path: |
            frontend/test-results/
            frontend/playwright-report/
          retention-days: 7

  # ====================
  # Frontend Performance Tests
  # ====================
  frontend-performance:
    name: Frontend Performance Tests
    needs: frontend-quality
    if: github.event.inputs.skip_expensive_tests != 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 20
    defaults:
      run:
        working-directory: frontend

    steps:
      - name: Checkout code
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      - name: Setup Node.js Environment
        uses: ./.github/actions/setup-node
        with:
          node-version: ${{ env.NODE_VERSION }}
          pnpm-version: ${{ env.PNPM_VERSION }}
          working-directory: frontend

      - name: Download build artifacts
        uses: actions/download-artifact@c850b930e6ba138125429b7e5c93fc707a7f8427 # v4.1.4
        with:
          name: nextjs-build-${{ github.run_id }}
          path: frontend/.next

      - name: Install Lighthouse CI
        run: |
          echo "::group::Installing Lighthouse CI"
          npm install -g @lhci/cli
          echo "::endgroup::"

      - name: Start Next.js server
        run: |
          echo "::group::Starting Next.js server"
          npm run start &
          sleep 10
          curl -f http://localhost:3000 || exit 1
          echo "::endgroup::"

      - name: Run Lighthouse CI
        run: |
          echo "::group::Running Lighthouse performance tests"
          lhci collect --config=./lighthouse.config.js
          lhci assert --config=./lighthouse.config.js
          echo "::endgroup::"

      - name: Upload Lighthouse reports
        if: always()
        uses: actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3 # v4.3.1
        with:
          name: lighthouse-reports-${{ github.run_id }}
          path: frontend/.lighthouseci/
          retention-days: 7

  # ====================
  # Frontend Build Matrix
  # ====================
  frontend-build:
    name: Frontend Build (${{ matrix.build-mode }})
    needs: frontend-quality
    runs-on: ubuntu-latest
    timeout-minutes: 15
    strategy:
      fail-fast: false
      matrix:
        build-mode: [development, production]
    defaults:
      run:
        working-directory: frontend

    steps:
      - name: Checkout code
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      - name: Setup Node.js Environment
        uses: ./.github/actions/setup-node
        with:
          node-version: ${{ env.NODE_VERSION }}
          pnpm-version: ${{ env.PNPM_VERSION }}
          working-directory: frontend

      - name: Build application
        env:
          NODE_ENV: ${{ matrix.build-mode == 'production' && 'production' || 'development' }}
        run: |
          echo "::group::Building in ${{ matrix.build-mode }} mode"
          if [ "${{ matrix.build-mode }}" = "production" ]; then
            npm run build
          else
            npm run build:dev
          fi
          echo "::endgroup::"

      - name: Analyze bundle size
        if: matrix.build-mode == 'production'
        run: |
          echo "::group::Bundle size analysis"
          npm run analyze || echo "Bundle analysis not available"
          ls -la .next/static/chunks/
          echo "::endgroup::"

      - name: Upload build artifacts
        uses: actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3 # v4.3.1
        with:
          name: build-${{ matrix.build-mode }}-${{ github.run_id }}
          path: |
            frontend/.next/
            !frontend/.next/cache
          retention-days: 7

  # ====================
  # Frontend Coverage Analysis
  # ====================
  frontend-coverage:
    name: Frontend Coverage Analysis
    needs: [frontend-tests]
    if: always() && needs.frontend-tests.result == 'success'
    runs-on: ubuntu-latest
    timeout-minutes: 10
    defaults:
      run:
        working-directory: frontend

    steps:
      - name: Checkout code
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      - name: Setup Node.js Environment
        uses: ./.github/actions/setup-node
        with:
          node-version: ${{ env.NODE_VERSION }}
          pnpm-version: ${{ env.PNPM_VERSION }}
          working-directory: frontend

      - name: Download coverage artifacts
        uses: actions/download-artifact@c850b930e6ba138125429b7e5c93fc707a7f8427 # v4.1.4
        with:
          name: frontend-coverage-${{ github.run_id }}
          path: frontend/coverage

      - name: Check coverage threshold
        run: |
          echo "::group::Checking coverage threshold"
          if [ -f "coverage/coverage-summary.json" ]; then
            COVERAGE=$(node -e "console.log(JSON.parse(require('fs').readFileSync('coverage/coverage-summary.json')).total.lines.pct)")
            echo "Current coverage: ${COVERAGE}%"
            if [ "$(echo "$COVERAGE < ${{ env.FRONTEND_COVERAGE_THRESHOLD }}" | bc)" -eq 1 ]; then
              echo "❌ Coverage $COVERAGE% is below threshold ${{ env.FRONTEND_COVERAGE_THRESHOLD }}%"
              exit 1
            else
              echo "✅ Coverage $COVERAGE% meets threshold ${{ env.FRONTEND_COVERAGE_THRESHOLD }}%"
            fi
          else
            echo "❌ Coverage report not found"
            exit 1
          fi
          echo "::endgroup::"

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@e28ff129e5465c2c0dcc6f003fc735cb6ae0c673 # v4.5.0
        with:
          file: frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage
          fail_ci_if_error: false

      - name: Upload final coverage artifact
        uses: actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3 # v4.3.1
        with:
          name: frontend-final-coverage-${{ github.run_id }}
          path: frontend/coverage/
          retention-days: 30

  # ====================
  # Frontend Quality Gate
  # ====================
  frontend-quality-gate:
    name: Frontend Quality Gate
    needs: [frontend-quality, frontend-tests, frontend-e2e, frontend-performance, frontend-build, frontend-coverage]
    if: always()
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: Check quality gate
        run: |
          echo "::group::Frontend Quality Gate Results"
          
          # Check each job result
          quality_result="${{ needs.frontend-quality.result }}"
          tests_result="${{ needs.frontend-tests.result }}"
          e2e_result="${{ needs.frontend-e2e.result }}"
          performance_result="${{ needs.frontend-performance.result }}"
          build_result="${{ needs.frontend-build.result }}"
          coverage_result="${{ needs.frontend-coverage.result }}"
          
          echo "Quality checks: $quality_result"
          echo "Unit tests: $tests_result"
          echo "E2E tests: $e2e_result"
          echo "Performance tests: $performance_result"
          echo "Build: $build_result"
          echo "Coverage: $coverage_result"
          
          # Determine overall result
          failed_jobs=0
          
          if [ "$quality_result" != "success" ]; then
            echo "❌ Quality checks failed"
            failed_jobs=$((failed_jobs + 1))
          fi
          
          if [ "$tests_result" != "success" ]; then
            echo "❌ Unit tests failed"
            failed_jobs=$((failed_jobs + 1))
          fi
          
          if [ "$e2e_result" != "success" ] && [ "$e2e_result" != "skipped" ]; then
            echo "❌ E2E tests failed"
            failed_jobs=$((failed_jobs + 1))
          fi
          
          if [ "$performance_result" != "success" ] && [ "$performance_result" != "skipped" ]; then
            echo "❌ Performance tests failed"
            failed_jobs=$((failed_jobs + 1))
          fi
          
          if [ "$build_result" != "success" ]; then
            echo "❌ Build failed"
            failed_jobs=$((failed_jobs + 1))
          fi
          
          if [ "$coverage_result" != "success" ] && [ "$coverage_result" != "skipped" ]; then
            echo "❌ Coverage analysis failed"
            failed_jobs=$((failed_jobs + 1))
          fi
          
          if [ $failed_jobs -eq 0 ]; then
            echo "✅ All frontend quality checks passed!"
          else
            echo "❌ $failed_jobs frontend quality check(s) failed"
            exit 1
          fi
          echo "::endgroup::"

      - name: Update PR status
        if: github.event_name == 'pull_request'
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          script: |
            const { owner, repo } = context.repo;
            const pull_number = context.payload.pull_request.number;
            
            const statusText = '${{ needs.frontend-quality-gate.result }}' === 'success' 
              ? '✅ Frontend quality checks passed'
              : '❌ Frontend quality checks failed';
            
            await github.rest.issues.createComment({
              owner,
              repo,
              issue_number: pull_number,
              body: `## Frontend CI Results\n\n${statusText}\n\n- Quality: ${{ needs.frontend-quality.result }}\n- Tests: ${{ needs.frontend-tests.result }}\n- E2E: ${{ needs.frontend-e2e.result }}\n- Performance: ${{ needs.frontend-performance.result }}\n- Build: ${{ needs.frontend-build.result }}\n- Coverage: ${{ needs.frontend-coverage.result }}`
            });