name: 'Security Scan'
description: 'Unified security scanning action for Python and Node.js projects'
author: 'TripSage Team'

inputs:
  scan-python:
    description: 'Whether to scan Python code'
    required: false
    default: 'true'
  scan-frontend:
    description: 'Whether to scan frontend/Node.js code'
    required: false
    default: 'true'
  python-path:
    description: 'Path to Python code'
    required: false
    default: '.'
  frontend-path:
    description: 'Path to frontend code'
    required: false
    default: 'frontend'
  fail-on-severity:
    description: 'Minimum severity to fail the scan (low, medium, high, critical)'
    required: false
    default: 'high'
  create-issues:
    description: 'Whether to create GitHub issues for findings'
    required: false
    default: 'false'
  upload-sarif:
    description: 'Whether to upload SARIF results to GitHub Security'
    required: false
    default: 'true'

outputs:
  python-vulnerabilities:
    description: 'Number of Python vulnerabilities found'
    value: ${{ steps.python-scan-summary.outputs.count }}
  frontend-vulnerabilities:
    description: 'Number of frontend vulnerabilities found'
    value: ${{ steps.frontend-scan-summary.outputs.count }}
  secrets-found:
    description: 'Whether hardcoded secrets were found'
    value: ${{ steps.secrets-scan.outputs.found }}
  scan-passed:
    description: 'Whether all security scans passed'
    value: ${{ steps.final-summary.outputs.passed }}

runs:
  using: "composite"
  steps:
    # Create reports directory
    - name: Create reports directory
      shell: bash
      run: |
        mkdir -p security-reports

    # Python Security Scanning
    - name: Run Bandit security scan
      if: inputs.scan-python == 'true'
      shell: bash
      continue-on-error: true
      run: |
        echo "::group::Installing and running Bandit"
        pip install bandit[sarif]
        bandit -r ${{ inputs.python-path }} \
          --exclude "*/tests/*,*/test_*,*/.venv/*,*/venv/*,*/node_modules/*" \
          -f sarif \
          -o security-reports/bandit-results.sarif \
          --severity-level ${{ inputs.fail-on-severity }} || true
        
        # Also generate JSON for parsing
        bandit -r ${{ inputs.python-path }} \
          --exclude "*/tests/*,*/test_*,*/.venv/*,*/venv/*,*/node_modules/*" \
          -f json \
          -o security-reports/bandit-results.json \
          --severity-level ${{ inputs.fail-on-severity }} || true
        echo "::endgroup::"

    # Safety check for known vulnerabilities
    - name: Run Safety check
      if: inputs.scan-python == 'true'
      shell: bash
      continue-on-error: true
      run: |
        echo "::group::Running Safety check"
        pip install safety
        
        # Generate requirements file if not exists
        if [ ! -f "requirements.txt" ] && [ -f "pyproject.toml" ]; then
          pip install pip-tools
          pip-compile pyproject.toml -o requirements.txt || true
        fi
        
        if [ -f "requirements.txt" ]; then
          safety check -r requirements.txt --json > security-reports/safety-results.json || true
          safety check -r requirements.txt || true
        else
          echo "No requirements.txt found, skipping Safety check"
        fi
        echo "::endgroup::"

    # Hardcoded secrets scanning
    - name: Scan for hardcoded secrets
      id: secrets-scan
      shell: bash
      continue-on-error: true
      run: |
        echo "::group::Scanning for hardcoded secrets"
        
        # Check for common secret patterns
        secret_patterns=(
          "password.*=.*['\"].*['\"]"
          "api[_-]?key.*=.*['\"].*['\"]"
          "secret.*=.*['\"].*['\"]"
          "token.*=.*['\"].*['\"]"
          "bearer.*=.*['\"].*['\"]"
          "private[_-]?key.*=.*['\"].*['\"]"
        )
        
        found_secrets=false
        echo "## Hardcoded Secrets Scan Results" > security-reports/secrets-scan.md
        
        for pattern in "${secret_patterns[@]}"; do
          echo "Checking for pattern: $pattern"
          results=$(grep -r -i -E "$pattern" \
            --exclude-dir=.git \
            --exclude-dir=node_modules \
            --exclude-dir=.venv \
            --exclude-dir=venv \
            --exclude-dir=dist \
            --exclude-dir=build \
            --exclude="*.min.js" \
            --exclude="*.map" \
            --exclude="*.lock" \
            --exclude="*.svg" \
            --exclude="*.png" \
            --exclude="*.jpg" \
            --exclude="*.jpeg" \
            --exclude="*.gif" \
            . 2>/dev/null || true)
          
          if [ -n "$results" ]; then
            found_secrets=true
            echo "Found potential secrets matching pattern: $pattern" >> security-reports/secrets-scan.md
            echo "\`\`\`" >> security-reports/secrets-scan.md
            echo "$results" | head -10 >> security-reports/secrets-scan.md
            echo "\`\`\`" >> security-reports/secrets-scan.md
          fi
        done
        
        if [ "$found_secrets" = true ]; then
          echo "found=true" >> $GITHUB_OUTPUT
          echo "::warning::Potential hardcoded secrets found!"
        else
          echo "found=false" >> $GITHUB_OUTPUT
          echo "No hardcoded secrets found." >> security-reports/secrets-scan.md
        fi
        echo "::endgroup::"

    # Frontend dependency scanning
    - name: Scan frontend dependencies
      if: inputs.scan-frontend == 'true'
      shell: bash
      working-directory: ${{ inputs.frontend-path }}
      continue-on-error: true
      run: |
        echo "::group::Scanning frontend dependencies"
        
        # Check if npm/pnpm audit is available
        if [ -f "package.json" ]; then
          if [ -f "pnpm-lock.yaml" ]; then
            pnpm audit --json > ../security-reports/pnpm-audit.json || true
            pnpm audit || true
          elif [ -f "package-lock.json" ]; then
            npm audit --json > ../security-reports/npm-audit.json || true
            npm audit || true
          fi
        fi
        echo "::endgroup::"

    # Parse Python scan results
    - name: Parse Python scan results
      id: python-scan-summary
      if: inputs.scan-python == 'true'
      shell: bash
      run: |
        echo "::group::Python security scan summary"
        count=0
        
        # Parse Bandit results
        if [ -f "security-reports/bandit-results.json" ]; then
          bandit_count=$(jq '.metrics._totals | to_entries | map(select(.key | startswith("SEVERITY.")) | .value) | add // 0' security-reports/bandit-results.json)
          count=$((count + bandit_count))
          echo "Bandit found $bandit_count issues"
        fi
        
        # Parse Safety results
        if [ -f "security-reports/safety-results.json" ]; then
          safety_count=$(jq 'length // 0' security-reports/safety-results.json)
          count=$((count + safety_count))
          echo "Safety found $safety_count vulnerabilities"
        fi
        
        echo "count=$count" >> $GITHUB_OUTPUT
        echo "Total Python vulnerabilities: $count"
        echo "::endgroup::"

    # Parse frontend scan results
    - name: Parse frontend scan results
      id: frontend-scan-summary
      if: inputs.scan-frontend == 'true'
      shell: bash
      run: |
        echo "::group::Frontend security scan summary"
        count=0
        
        # Parse npm/pnpm audit results
        if [ -f "security-reports/pnpm-audit.json" ]; then
          audit_count=$(jq '.advisories | length // 0' security-reports/pnpm-audit.json 2>/dev/null || echo "0")
          count=$((count + audit_count))
          echo "pnpm audit found $audit_count vulnerabilities"
        elif [ -f "security-reports/npm-audit.json" ]; then
          audit_count=$(jq '.vulnerabilities | to_entries | map(.value) | add // 0' security-reports/npm-audit.json 2>/dev/null || echo "0")
          count=$((count + audit_count))
          echo "npm audit found $audit_count vulnerabilities"
        fi
        
        echo "count=$count" >> $GITHUB_OUTPUT
        echo "Total frontend vulnerabilities: $count"
        echo "::endgroup::"

    # Generate final summary
    - name: Generate security summary
      id: final-summary
      shell: bash
      run: |
        echo "::group::Security scan summary"
        
        python_vulns="${{ steps.python-scan-summary.outputs.count }}"
        frontend_vulns="${{ steps.frontend-scan-summary.outputs.count }}"
        secrets_found="${{ steps.secrets-scan.outputs.found }}"
        
        total_issues=$((${python_vulns:-0} + ${frontend_vulns:-0}))
        
        echo "## Security Scan Summary" > security-reports/summary.md
        echo "" >> security-reports/summary.md
        echo "- Python vulnerabilities: ${python_vulns:-0}" >> security-reports/summary.md
        echo "- Frontend vulnerabilities: ${frontend_vulns:-0}" >> security-reports/summary.md
        echo "- Hardcoded secrets found: $secrets_found" >> security-reports/summary.md
        echo "- Total issues: $total_issues" >> security-reports/summary.md
        
        # Determine if scan passed based on severity
        passed=true
        if [ "$secrets_found" = "true" ]; then
          passed=false
        fi
        
        # Check severity threshold
        case "${{ inputs.fail-on-severity }}" in
          low)
            if [ $total_issues -gt 0 ]; then
              passed=false
            fi
            ;;
          medium|high|critical)
            # Would need to parse severity from results for accurate check
            # For now, any issue fails if severity is set
            if [ $total_issues -gt 0 ]; then
              echo "::warning::Found $total_issues security issues"
            fi
            ;;
        esac
        
        echo "passed=$passed" >> $GITHUB_OUTPUT
        
        cat security-reports/summary.md
        echo "::endgroup::"

    # Upload SARIF results
    - name: Upload SARIF results
      if: inputs.upload-sarif == 'true' && github.event_name == 'push'
      uses: github/codeql-action/upload-sarif@v3
      continue-on-error: true
      with:
        sarif_file: security-reports/bandit-results.sarif
        category: bandit-scan

    # Upload artifacts
    - name: Upload security reports
      if: always()
      uses: actions/upload-artifact@6f51ac03b9356f520e9adb1b1b7802705f340c2b # v4.5.0
      with:
        name: security-reports-${{ github.run_id }}
        path: security-reports/
        retention-days: 30

    # Fail if security issues found
    - name: Check security scan results
      shell: bash
      run: |
        if [ "${{ steps.final-summary.outputs.passed }}" != "true" ]; then
          echo "::error::Security scan failed! Check the security reports for details."
          exit 1
        fi