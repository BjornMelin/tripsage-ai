name: 'Setup Node.js Environment'
description: 'Composite action for Node.js environment setup with pnpm package manager'
author: 'TripSage Team'

inputs:
  node-version:
    description: 'Node.js version to use'
    required: false
    default: '20'
  pnpm-version:
    description: 'pnpm version to use'
    required: false
    default: '9'
  working-directory:
    description: 'Working directory for Node.js operations'
    required: false
    default: 'frontend'
  install-dependencies:
    description: 'Whether to install dependencies'
    required: false
    default: 'true'
  cache-dependency-path:
    description: 'Path to pnpm-lock.yaml for caching'
    required: false
    default: 'frontend/pnpm-lock.yaml'

outputs:
  node-version:
    description: 'The installed Node.js version'
    value: ${{ steps.setup-node.outputs.node-version }}
  pnpm-version:
    description: 'The installed pnpm version'
    value: ${{ steps.pnpm-version.outputs.version }}
  cache-hit:
    description: 'Whether the cache was hit'
    value: ${{ steps.cache-pnpm.outputs.cache-hit }}

runs:
  using: "composite"
  steps:
    # Setup Node.js with specified version
    - name: Setup Node.js
      id: setup-node
      uses: actions/setup-node@39370e3970a6d050c480ffad4ff0ed4d3fdee5af # v4.1.0
      with:
        node-version: ${{ inputs.node-version }}

    # Install pnpm
    - name: Install pnpm
      uses: pnpm/action-setup@fe02b34f77f8bc703788d5817da081398fad5dd2 # v4.0.0
      with:
        version: ${{ inputs.pnpm-version }}
        run_install: false

    # Get pnpm version for output
    - name: Get pnpm version
      id: pnpm-version
      shell: bash
      run: |
        echo "version=$(pnpm --version)" >> $GITHUB_OUTPUT

    # Get pnpm store directory
    - name: Get pnpm store directory
      id: pnpm-store
      shell: bash
      run: |
        echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

    # Cache pnpm dependencies
    - name: Setup pnpm cache
      id: cache-pnpm
      uses: actions/cache@1bd1e32a3bdc45362d1e726936510720a7c30a57 # v4.2.0
      with:
        path: |
          ${{ steps.pnpm-store.outputs.STORE_PATH }}
          ${{ inputs.working-directory }}/node_modules
          ${{ inputs.working-directory }}/.next/cache
        key: ${{ runner.os }}-pnpm-${{ inputs.node-version }}-${{ hashFiles(inputs.cache-dependency-path) }}
        restore-keys: |
          ${{ runner.os }}-pnpm-${{ inputs.node-version }}-

    # Install dependencies if requested
    - name: Install dependencies
      if: inputs.install-dependencies == 'true'
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "::group::Installing Node.js dependencies"
        if [ -f "pnpm-lock.yaml" ]; then
          pnpm install --frozen-lockfile
        elif [ -f "package-lock.json" ]; then
          npm ci
        elif [ -f "yarn.lock" ]; then
          yarn install --frozen-lockfile
        else
          echo "Warning: No lock file found, installing with pnpm"
          pnpm install
        fi
        echo "::endgroup::"

    # Verify installation
    - name: Verify Node.js setup
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "::group::Node.js environment info"
        node --version
        pnpm --version
        npm --version
        echo "Working directory: $(pwd)"
        if [ -f "package.json" ]; then
          echo "Package.json found"
          jq '.name, .version' package.json 2>/dev/null || true
        fi
        echo "::endgroup::"