[pytest]
# Test discovery
testpaths = tests
python_files = test_*.py
python_classes = Test*
python_functions = test_*

# Output configuration
addopts = 
    --strict-markers
    --strict-config
    --verbose
    --tb=short
    --cov=tripsage
    --cov=tripsage_core
    --cov-report=term-missing
    --cov-report=html:coverage/html
    --cov-report=xml:coverage/coverage.xml
    --cov-fail-under=95
    --cov-branch
    --no-cov-on-fail
    --timeout=60
    --timeout-method=thread
    -ra

# Async test configuration
asyncio_mode = auto
asyncio_default_fixture_loop_scope = function

# Markers for test categorization
markers =
    unit: Unit tests for individual components
    integration: Integration tests for service workflows
    e2e: End-to-end tests for complete user journeys
    performance: Performance and load testing
    security: Security and authorization testing
    slow: Tests that take longer than 1 second
    external: Tests that require external services
    mcp: Tests that involve MCP integration
    database: Tests that require database setup
    cache: Tests that involve caching functionality
    websocket: Tests that involve WebSocket functionality
    chat: Tests related to chat and AI features
    accommodation: Tests for accommodation functionality
    flight: Tests for flight functionality
    trip: Tests for trip planning functionality
    auth: Tests for authentication and authorization
    api: Tests for API endpoints
    memory: Tests for memory and personalization features

# Test execution configuration
minversion = 6.0
# timeout = 300  # Requires pytest-timeout plugin
# timeout_method = thread  # Requires pytest-timeout plugin

# Warnings configuration
filterwarnings =
    error
    ignore::UserWarning
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore:.*httpx.*:DeprecationWarning
    ignore:.*pydantic.*:DeprecationWarning

# Environment variables for testing are set by CI/test runner
# No env section needed as variables are configured externally
